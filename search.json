[{"title":"jsx基础知识","path":"/2024/01/15/jsx/","content":"jsx语法JSX是类似于XML的js扩展语法，其本质是React.createElement(component,props,…children)方法的语法糖 注：XML早期用于存储和传输数据。 XML格式如下： 1234&lt;student&gt;&lt;name&gt;Tom&lt;/name&gt;&lt;age&gt;19&lt;/age&gt;&lt;/student&gt; JSON格式如下： 1&quot;&#123;&quot;name&quot;：&quot;Tom&quot;,&quot;age&quot;:19&#125;&quot; jsx语法规则1、定义虚拟DOM时，不要写引号。 12345const VDOM=( /* 此处一定不要写引号，因为不是字符串 */ &lt;h1 id=&quot;test&quot;&gt; &lt;span&gt;Hello,React&lt;/span&gt; &lt;/h1&gt;)//2.渲染虚拟DOM到页面ReactDOM.render(VDOM,document.getElementById(&#x27;test&#x27;)). 2、标签里如果要用JS的表达式，要用{}。 1234567const myID=&quot;Test&quot;;const string1=&quot;Hello,React&quot;const VDOM=( /* 此处一定不要写引号，因为不是字符串 */ &lt;h1 id=&#123;myID.toLowerCase()&#125;&gt; &lt;span&gt;&#123;string1.toLowerCase()&#125;&lt;/span&gt; &lt;/h1&gt;)//2.渲染虚拟DOM到页面ReactDOM.render(VDOM,document.getElementById(&#x27;test&#x27;)). 3、写样式时指定类名不用class，用className。 1234567const myID=&quot;Test&quot;;const string1=&quot;Hello,React&quot;const VDOM=( /* 此处一定不要写引号，因为不是字符串 */ &lt;h1 className=&quot;title&quot; id=&#123;myID.toLowerCase()&#125;&gt; &lt;span&gt;&#123;string1.toLowerCase()&#125;&lt;/span&gt; &lt;/h1&gt;)//2.渲染虚拟DOM到页面ReactDOM.render(VDOM,document.getElementById(&#x27;test&#x27;)). 12345&lt;style&gt;.title&#123;background:red;&#125;&lt;/style&gt; 4、写内联样式时用style&#x3D;\"{{kay:value}}\"的样式。 1234567const myID=&quot;Test&quot;;const string1=&quot;Hello,React&quot;const VDOM=( /* 此处一定不要写引号，因为不是字符串 */ &lt;h1 className=&quot;title&quot; id=&#123;myID.toLowerCase()&#125;&gt; &lt;span style=&#123;&#123;color:&#x27;white&#x27;,fontSize:&#x27;29px&#x27;&#125;&#125;&gt;&#123;string1.toLowerCase()&#125;&lt;/span&gt; &lt;/h1&gt;)//2.渲染虚拟DOM到页面ReactDOM.render(VDOM,document.getElementById(&#x27;test&#x27;)). 5、虚拟DOM必须只有一个根标签。 6、标签必须闭合。 7、标签首字母 1）若小写字母开头，则将标签转为html中同名元素，若html中不存在同名元素，则报错。 2）若大写字母开头，react就去渲染对应的组件，若组件没有定义，则报错。 注：区分js语句和js表达式 1、表达式：会产生一个值，可以放在任何一个需要值的地方。如a、a+b、demo(1)、arr.map()、function test（）{} 2、语句（代码）： 比如if(){}、for(){}、switch（）{case: ….}","tags":["react","前端","jsx"],"categories":["react"]},{"path":"/2024/01/15/testlx/","content":"Do not go gentle into that good night."},{"title":"字符实体","path":"/2024/01/15/字符实体/","content":"空格的字符实体&amp;nbsp; &amp;#160 标签&lt;&gt;的字符实体&amp;lt; h1 &amp;gt; &amp;的字符实体&amp;amp;&#x20; 人民币的字符实体&amp;yen; 版权的字符实体&amp;copy; 乘号的字符实体&amp;times; 除号的字符实体&amp;divide;","tags":["前端","html"],"categories":["html"]},{"title":"函数式组件","path":"/2024/01/15/函数式组件/","content":"12345678910111213141516171819&lt;html lang=&quot;en&quot;&gt;&lt;head&gt; &lt;title&gt;Document&lt;/title&gt;&lt;/head&gt;&lt;body&gt; &lt;div id=&quot;test&quot;&gt; &lt;/div&gt;&lt;/body&gt;&lt;script src=&quot;../react.development.js&quot; type=&quot;text/javascript&quot;&gt;&lt;/script&gt;&lt;script src=&quot;../react-dom.development.js&quot; type=&quot;text/javascript&quot;&gt;&lt;/script&gt;&lt;script src=&quot;../babel.min.js&quot; type=&quot;text/javascript&quot;&gt;&lt;/script&gt;&lt;script type=&quot;text/babel&quot;&gt;function demo()&#123;console.log(this);//此处的this是undefined，因为babel编译后开启了严格模式return &lt;h2&gt;我是用函数定义的组件&lt;/h2&gt;&#125; &lt;/script&gt;&lt;/html&gt;","tags":["react","前端","组件"],"categories":["react"]},{"title":"块级元素、行内元素、行内块元素","path":"/2024/01/15/块级元素、行内元素、行内块元素/","content":"块级元素blockquote、address 独占一行。 行内元素文本标签（&lt;em&gt;&lt;strong&gt;&lt;span&gt;&lt;a&gt;等） 不独占一行 规则1：块级元素中能写行内元素、块级元素。 规则2：行内元素中能写行内元素，不能写块级元素 特殊规则: H1-H6不能嵌套 特殊规则：p标签中不能写块元素 特殊规则：a标签内可以包含除自身之外的任何元素 行内块元素IMG","tags":["前端","html"],"categories":["html"]},{"title":"类式组件","path":"/2024/01/15/类式组件/","content":"类123456789101112131415161718192021222324252627282930&lt;script type=&quot;text/javascript&quot;&gt;class Person&#123;constructor(name,age)&#123;//构造器方法//构造器中的this是类的实例对象this.name=namethis.age=age&#125;//一般方法speak()&#123;//speak方法放在了类的原型对象上，供实例使用console.log(`我叫$(this.name),我的年龄是$(this.age)`)&#125;&#125;class Student extends Person&#123; constructor(name,age,grade)&#123; super(name,age) this.grade=grade; &#125; speak()&#123; console.log(`我叫$&#123;this.name&#125;,我的年龄是$&#123;this.age&#125;,我的年纪是$&#123;this.grade&#125;`) &#125;&#125;const p1=new Person(&#x27;tom&#x27;,18)const p2=new Person(&#x27;jerry&#x27;,19)const s1=new Student(&#x27;zhang&#x27;,15,&#x27;高一&#x27;)p1.speak()p2.speak()s1.speak()&lt;/script&gt; 注： 1、类的构造器不是一定要写的 2、如果a类继承于b类，且a类中写了构造器，则a类构造器中super必须要调用。 3、类定义的方法，都放在类的原型对象上，共实例使用 创建类组件12345678910111213&lt;script type=&quot;text/babel&quot;&gt;class MyComponent extends React.Component&#123;//这里Component的c要大写//render是放在MyComponent原型对象上，供实例使用的render()&#123;return&#123;//render中的this是MyComponent的实例对象&lt;h2&gt;我是类定义的组件&lt;/h2&gt;&#125;&#125;&#125;ReactDOM.render(&lt;MyComponent/&gt;,document.getElementById(&#x27;test&#x27;))&lt;/script&gt; 执行ReactDOM.render（）之后。发生了什么？ 1、react解析组件标签，找到MyComponent组件 2、发现组件是使用类定义的，随后new出该类的实例，并通过该实例调用到原型上的render方法 3、将render返回的虚拟dom转为真实dom，随后呈现在页面中。","tags":["react","前端","组件"],"categories":["react"]},{"title":"虚拟DOM创建","path":"/2024/01/15/虚拟DOM创建/","content":"1.用jsx创建虚拟DOM1234const VDOM=( /* 此处一定不要写引号，因为不是字符串 */ &lt;h1 id=&quot;title&quot;&gt; &lt;span&gt;Hello,React&lt;/span&gt; &lt;/h1&gt;)ReactDOM.render(VDOM,document.querySelector(&#x27;.test&#x27;)) 2.用js创建虚拟DOM1234//1.创建虚拟DOM,创建嵌套格式的domconst VDOM=React.createElement(&#x27;h1&#x27;,&#123;id:&#x27;title&#x27;&#125;,React.createElement(&#x27;span&#x27;,&#123;&#125;,&#x27;hello,React&#x27;))//2.渲染虚拟DOM到页面ReactDOM.render(VDOM,document.querySelector(&#x27;.test&#x27;)). 3.虚拟DOM与真实DOM的区别1、虚拟DOM本质上就是Object类型的对象 2、虚拟DOM较为轻量级，真实DOM较为重量级，因为虚拟DOM运用于React内部，无需真实DOM上的过多属性。 3、虚拟DOM最终会被React转化为真实DOM。","tags":["react","前端"],"categories":["react"]},{"title":"补充标签","path":"/2024/01/15/补充标签/","content":"&lt; br&gt;换行 &lt; pre&gt;按原文显示 &lt; hr&gt;分割 隐藏域： &lt;input type&#x3D;”hidden” name&#x3D;”tag” value&#x3D;”100” &gt; 用户不可见的一个输入区域，作用是： 提交表单的时候，携带一些固定的数据。 name 属性：指定数据的名称。 value 属性：指定的是真正提交的数据。 &lt;label&gt;: label 标签可与表单控件相关联，关联之后点击文字，与之对应的表单控件就会获取焦点。 两种与 label 关联方式如下： 让 label 标签的 for 属性的值等于表单控件的 id 。 把表单控件套在 label 标签的里面。 &lt;iframe&gt;嵌入内容","tags":["前端","html"],"categories":["html"]},{"title":"表格","path":"/2024/01/15/表格/","content":"结构 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556&lt;table border=&quot;1&quot;&gt;&lt;!-- 表格标题 --&gt;&lt;caption&gt;学生信息&lt;/caption&gt;&lt;!-- 表格头部 --&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;姓名&lt;/th&gt;&lt;th&gt;性别&lt;/th&gt;&lt;th&gt;年龄&lt;/th&gt;&lt;th&gt;民族&lt;/th&gt;&lt;th&gt;政治面貌&lt;/th&gt;&lt;/tr&gt;&lt;/thead&gt;2. 常用属性&lt;!-- 表格主体 --&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;张三&lt;/td&gt;&lt;td&gt;男&lt;/td&gt;&lt;td&gt;18&lt;/td&gt;&lt;td&gt;汉族&lt;/td&gt;&lt;td&gt;团员&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;李四&lt;/td&gt;&lt;td&gt;女&lt;/td&gt;&lt;td&gt;20&lt;/td&gt;&lt;td&gt;满族&lt;/td&gt;&lt;td&gt;群众&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;王五&lt;/td&gt;&lt;td&gt;男&lt;/td&gt;&lt;td&gt;20&lt;/td&gt;&lt;td&gt;回族&lt;/td&gt;&lt;td&gt;党员&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;赵六&lt;/td&gt;&lt;td&gt;女&lt;/td&gt;&lt;td&gt;21&lt;/td&gt;&lt;td&gt;壮族&lt;/td&gt;&lt;td&gt;团员&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;!-- 表格脚注 --&gt;&lt;tfoot&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td&gt;&lt;/td&gt;&lt;td&gt;&lt;/td&gt;&lt;td&gt;&lt;/td&gt;&lt;td&gt;共计：4人&lt;/td&gt;&lt;/tr&gt;&lt;/tfoot&gt;&lt;/table&gt; 属性 一般table的属性height意义为最小高度。table会通过自动调整tbody来让整个table高度达到最小高度。","tags":["前端","html"],"categories":["html"]},{"path":"/2024/01/15/H5/","content":"H51、语义化标签1.1 布局标签 关于 article 和 section ： artical 里面可以有多个 section 。 section 强调的是分段或分块，如果你想将一块内容分成几段的时候，可使用 section 元素。 article 比 section 更强调独立性，一块内容如果比较独立、比较完整，应该使用article 元素。 1.2状态标签1、meter标签 语义：定义已知范围内的标量测量。也被称为 gauge （尺度），双标签，例如：电量、磁盘用量 等。 常用属性： 2、progeress标签 语义：显示某个任务完成的进度的指示器，一般用于表示进度条，双标签，例如：工作完成进度 等。 1.3列表标签 1.4新增文本标签1、文本注音 1234&lt;ruby&gt;&lt;span&gt;魑魅魍魉&lt;/span&gt;&lt;rt&gt;chī mèi wǎng liǎng &lt;/rt&gt;&lt;/ruby&gt; 2、文本标记 2、新增表单功能2.1表单控件新增属性 2.2 input新增属性值 2.3 form新增属性 3 多媒体标签3.1 视频标签&lt;video&gt; 标签用来定义视频，它是双标签。 3.2 音频标签 4.新增全局属性 5. 兼容性处理添加元信息，让浏览器处于最优渲染模式。 1234&lt;!--设置IE总是使用最新的文档模式进行渲染--&gt;&lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=Edge&quot;&gt;&lt;!--优先使用 webkit ( Chromium ) 内核进行渲染, 针对360等壳浏览器--&gt;&lt;meta name=&quot;renderer&quot; content=&quot;webkit&quot;&gt; 使用 html5shiv 让低版本浏览器认识 H5 的语义化标签。 123&lt;!--[if lt ie 9]&gt;&lt;script src=&quot;../sources/js/html5shiv.js&quot;&gt;&lt;/script&gt;&lt;![endif]--&gt; 扩展 lt 小于 lte 小于等于 gt 大于 gte 大于等于 ! 逻辑非 示例： 123456&lt;!--[if IE 8]&gt;仅IE8可见&lt;![endif]--&gt;&lt;!--[if gt IE 8]&gt;仅IE8以上可见&lt;![endif]—&gt;&lt;!--[if lt IE 8]&gt;仅IE8以下可见&lt;![endif]—&gt;&lt;!--[if gte IE 8]&gt;IE8及以上可见&lt;![endif]—&gt;&lt;!--[if lte IE 8]&gt;IE8及以下可见&lt;![endif]—&gt;&lt;!--[if !IE 8]&gt;非IE8的IE可见&lt;![endif]--&gt;"}]