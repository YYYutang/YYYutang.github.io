[{"title":"盒子模型","path":"/2024/01/16/盒子模型/","content":"1.长度单位 px ：像素。 em ：相对元素 font-size 的倍数。如果子元素没有，就往父元素上找。 rem ：相对根字体大小，html标签就是根。 % ：相对父元素计算。 2.元素的显示模式2.1块元素（block）&lt;div&gt; 又称：块级元素 特点： 在页面中独占一行，不会与任何元素共用一行，是从上到下排列的。 默认宽度：撑满父元素。 默认高度：由内容撑开。 可以通过 CSS 设置宽高。 2.2行内元素（inline）&lt;span&gt; 又称：内联元素 特点: 1.在页面中不独占一行，一行中不能容纳下的行内元素，会在下一行继续从左到右排列 2.默认宽度：由内容撑开。 &#x2F;* 自定义鼠标光标 *&#x2F; cursor: url(“.&#x2F;arrow.png”),pointer; 3. 默认高度：由内容撑开。 4.无法通过 CSS 设置宽高。 2.3行内块元素（inline-block）&lt;img&gt; 又称：内联块元素 特点： 1.在页面中不独占一行，一行中不能容纳下的行内元素，会在下一行继续从左到右排列。 2.默认宽度：由内容撑开。 3.默认高度：由内容撑开。 4.可以通过 CSS 设置宽高。 注意：元素早期只分为：行内元素、块级元素，区分条件也只有一条：”是否独占一行”，如果按照这种分类方式，行内块元素应该算作行内元素。 3.总结块元素（block） 主体结构标签： &lt;html&gt; 、 &lt;body&gt; 排版标签： &lt;h1&gt; ~ &lt;h6&gt; 、 &lt;hr&gt; 、 &lt;p&gt; 、 &lt;pre&gt; 、 &lt;div&gt; 列表标签： &lt;ul&gt; 、 &lt;ol&gt; 、 &lt;li&gt; 、 &lt;dl&gt; 、 &lt;dt&gt; 、 &lt;dd&gt; 表格相关标签： &lt;table&gt; 、 &lt;tbody&gt; 、 &lt;thead&gt; 、 &lt;tfoot&gt; 、 &lt;tr&gt; 、 &lt;caption&gt; &#x20; 5.&lt;form&gt; 与 &lt;option&gt; 行内元素（inline） 文本标签： &lt;br&gt; 、 &lt;em&gt; 、 &lt;strong&gt; 、 &lt;sup&gt; 、 &lt;sub&gt; 、 &lt;del&gt; 、 &lt;ins&gt; &lt;a&gt; 与 &lt;label&gt; 行内块元素（inline-block） 图片： &lt;img&gt; 单元格： &lt;td&gt; 、 &lt;th&gt; 表单控件： &lt;input&gt; 、 &lt;textarea&gt; 、 &lt;select&gt; 、 &lt;button&gt; 框架标签： &lt;iframe&gt; 4.修改元素的显示模式通过 CSS 中的 display 属性可以修改元素的默认显示模式，常用值如下： none：元素会被隐藏。 block：元素将作为块级元素显示。 inline：元素将作为内联元素显示。 inline-block：元素将作为行内块元素显示 5.盒子模型组成 margin（外边距）： 盒子与外界的距离。 border（边框）： 盒子的边框。 padding（内边距）： 紧贴内容的补白区域。 content（内容）：元素中的文本或后代元素都是它的内容。 盒子的大小 &#x3D; content + 左右 padding + 左右 border 。 5.1 paddingpadding 复合属性的使用规则： padding: 10px; 四个方向内边距都是 10px 。 padding: 10px 20px; 上 10px ，左右 20px 。（上下、左右） padding: 10px 20px 30px; 上 10px ，左右 20px ，下 30px 。（上、左右、下） padding: 10px 20px 30px 40px; 上 10px ，右 20px ，下 30px ，左 40px 。（上、右、 下、左） 注意点： padding 的值不能为负数。 行内元素 的 左右内边距是没问题的，上下内边距不能完美的设置。 块级元素、行内块元素，四个方向内边距都可以完美设置。 5.2 margin注意事项 子元素的 margin ，是参考父元素的 content 计算的。（因为是父亲的 content 中承装着子元素） 上 margin 、左 margin ：影响自己的位置；下 margin 、右 margin ：影响后面兄弟元素的位置。 块级元素、行内块元素，均可以完美地设置四个方向的 margin ；但行内元素，左右margin 可以完美设置，上下 margin 设置无效。 margin 的值也可以是 auto ，如果给一个块级元素设置左右 margin 都为 auto ，该块级元素会在父元素中水平居中。 margin 的值可以是负值。 5.3 margin塌陷问题什么是 margin 塌陷？第一个子元素的上 margin 会作用在父元素上，最后一个子元素的下 margin 会作用在父元素上。如何解决 margin 塌陷？方案一： 给父元素设置不为 0 的 padding 。方案二： 给父元素设置宽度不为 0 的 border 。方案三：给父元素设置 css 样式 overflow:hidden 5.4 margin合并问题什么是 margin 合并？ 上面兄弟元素的下外边距和下面兄弟元素的上外边距会合并，取一个最大的值，而不是相加。 如何解决 margin 塌陷？ 无需解决，布局的时候上下的兄弟元素，只给一个设置上下外边距就可以了。 6.内容溢出 7.隐藏元素方式一：visibility 属性 visibility 属性默认值是 show ，如果设置为 hidden ，元素会隐藏。 元素看不见了，还占有原来的位置（元素的大小依然保持）。 方式二： display 属性 设置 display:none ，就可以让元素隐藏。 彻底地隐藏，不但看不见，也不占用任何位置，没有大小宽高。 8.样式的继承有些样式会继承，元素如果本身设置了某个样式，就使用本身设置的样式；但如果本身没有设置某个样式，会从父元素开始一级一级继承（优先继承离得近的祖先元素）。 会继承的 css 属性： 字体属性、文本属性、文字颜色等 不会继承的 css 属性： 边框、背景、内边距、外边距、宽高、溢出方式等 一个规律：能继承的属性，都是不影响布局的，简单说：都是和盒子模型没关系的。 9.默认样式元素一般都有默认的样式，例如： &lt;a&gt; 元素：下划线、字体颜色、鼠标小手。 &lt;h1&gt; ~ &lt;h6&gt; 元素： 文字加粗、文字大小、上下外边距。 &lt;p&gt; 元素：上下外边距 &lt;ul&gt; 、 ol 元素：左内边距 body 元素： 8px 外边距（4个方向） 优先级：元素的默认样式 &gt; 继承的样式，所以如果要重置元素的默认样式，选择器一定要直接选择器到该元素。 10.布局效果1.行内元素、行内块元素，可以被父元素当做文本处理 即：可以像处理文本对齐一样，去处理：行内、行内块在父元素中的对齐。 例如： text-align 、 line-height 、 text-indent 等。 2.如何让子元素，在父亲中 水平居中： 若子元素为块元素，给父元素加上： margin:0 auto; 。 若子元素为行内元素、行内块元素，给父元素加上： text-align:center 。 📌3.如何让子元素，在父亲中 垂直居中： 若子元素为块元素，给子元素加上： margin-top ，值为：(父元素 content －子元素盒子 总高) &#x2F; 2。 若子元素为行内元素、行内块元素： 让父元素的 height &#x3D; line-height ，每个子元素都加上： vertical-align:middle; 。 补充：若想绝对垂直居中，父元素 font-size 设置为 0 。 11.元素之间的空白问题产生的原因： 行内元素、行内块元素，彼此之间的换行会被浏览器解析为一个空白字符。 解决方案： 方案一： 去掉换行和空格（不推荐）。 方案二： 给父元素设置 font-size:0 ，再给需要显示文字的元素，单独设置字体大小（推 荐）。 12.行内块的幽灵空白问题产生原因： 行内块元素与文本的基线对齐，而文本的基线与文本最底端之间是有一定距离的。 解决方案： &#x20;方案一： 给行行内块设置 vertical ，值不为 baseline 即可，设置为 middel 、 bottom 、top 均可。 方案二： 若父元素中只有一张图片，没有文字，设置图片为 display:block 。 方案三： 给父元素设置 font-size: 0 。如果该行内块内部还有文本，则需单独设置 font-size 。","tags":["html","前端"],"categories":["html"]},{"title":"常用属性","path":"/2024/01/16/常用属性/","content":"1.字体font-size：字体的大小font-family：控制字体类型。可以设置多个字体，按照从左到右的顺序逐个查找，找到就用，没有找到就使用后面 的，且通常在最后写上 serif （衬线字体）或 sans-serif （非衬线字体）。 font-style：字体是否为斜体常用值： normal ：正常（默认值） italic ：斜体（使用字体自带的斜体效果） oblique ：斜体（强制倾斜产生的斜体效果） 实现斜体时，更推荐使用 italic 。 font-weight：控制字体的粗细。 lighter ：细 normal ： 正常 bold ：粗 bolder ：很粗 （多数字体不支持） 字体复合写法属性名： font ，可以把上述字体样式合并成一个属性。 作用：将上述所有字体相关的属性复合在一起编写。 编写规则： 字体大小、字体族必须都写上。 字体族必须是最后一位、字体大小必须是倒数第二位。 各个属性间用空格隔开。 实际开发中更推荐复合写法，但这也不是绝对的，比如只想设置字体大小，那就直接用 font- size 属性 2.文本color： 颜色名 rgb 或 rgba HEX 或 HEXA （十六进制） HSL 或 HSLA 开发中常用的是： rgb&#x2F;rgba 或 HEX&#x2F;HEXA （十六进制）。 间距：字母间距： letter-spacing 单词间距： word-spacing （通过空格识别词，每个中文算一个letter） 属性值为像素（ px ），正值让间距增大，负值让间距缩小。 text-decoration:控制文本的各种装饰线。可选值： none ： 无装饰线（常用） underline ：下划线（常用） overline ： 上划线 line-through ： 删除线 可搭配如下值使用： dotted ：虚线 wavy ：波浪线 也可以指定颜色 text-indent：文本缩进作用：控制文本首字母的缩进。 属性值： css 中的长度单位，例如： px text-align：控制文本的水平对齐方式。常用值： left ：左对齐（默认值） right ：右对齐 center ：居中对齐 line-height：制一行文字的高度。可选值： normal ：由浏览器根据文字大小决定的一个默认值。 像素( px )。 数字：参考自身 font-size 的倍数（很常用）。 百分比：参考自身 font-size 的百分比。 注 ： line-height 过小会怎样？—— 文字产生重叠，且最小值是 0 ，不能为负数。 line-height 是可以继承的，且为了能更好的呈现文字，最好写数值。 line-height 和 height 是什么关系？ 设置了 height ，那么高度就是 height 的值。 不设置 height 的时候，会根据 line-height 计算高度 文本对齐_垂直 顶部：无需任何属性，在垂直方向上，默认就是顶部对齐。 居中：对于单行文字，让 height &#x3D; line-height 即可。 问题：多行文字垂直居中怎么办？—— 后面我们用定位去做。 3底部：对于单行文字，目前一个临时的方式： 让 line-height &#x3D; ( height × 2 ) - font-size - x 。 备注： x 是根据字体族，动态决定的一个值。 问题：垂直方向上的底部对齐，更好的解决办法是什么？—— 后面我们用定位去做。 vertical-align :垂直对齐方式用于指定同一行元素之间，或 表格单元格内文字的垂直对齐方式。 常用值： baseline （默认值）：使元素的基线与父元素的基线对齐。 top ：使元素的顶部与其所在行的顶部对齐。 middle ：使元素的中部与父元素的基线加上父元素字母 x 的一半对齐。 bottom ：使元素的底部与其所在行的底部对齐。 特别注意： vertical-align 不能控制块元素，只能控制父级元素里的子元素 3.列表属性 4.表格属性4.1边框属性 注意： 以上 4 个边框相关的属性，其他元素也可以用，这是我们第一次遇见它们。 4.2表格属性 5.背景属性 6.鼠标属性","tags":["html","前端"],"categories":["html"]},{"title":"三大特性","path":"/2024/01/16/三大特性/","content":"1.层叠性概念：如果发生了样式冲突，那就会根据一定的规则（选择器优先级），进行样式的层叠（覆 盖）。 2.继承性概念：元素会自动拥有其父元素、或其祖先元素上所设置的某些样式。 规则：优先继承离得近的。 常见的可继承属性： 3.优先级!important &gt; 行内样式 &gt; ID选择器 &gt; 类选择器 &gt; 元素选择器 &gt; * &gt; 继承的样 式。 见选择器","tags":["html","前端"],"categories":["html"]},{"title":"选择器","path":"/2024/01/16/选择器/","content":"1.基本选择器1.1 通配选择器作用：可以选中所有的 HTML 元素。 语法： 123* &#123; color：orange&#125; 备注：清除样式时，会对我们有很大帮助 1.2元素选择器作用：为页面中某种元素统一设置样式。 语法： 1234h1 &#123; color: red; font-size: 40px;&#125; 1.3 类选择器作用：根据元素的 class 值，来选中某些元素。 123.button_choose&#123; color:red;&#125; 注： 一个元素的 class 属性，能写多个值，要用空格隔开，例如： 1&lt;h1 class=&quot;speak big&quot;&gt;你好&lt;/h1&gt; 1.4 ID选择器作用：根据元素的 id 值，来选中某个元素。 123#button_choose&#123; color:red;&#125; 注： 一个元素的 class 属性，能写多个值，要用空格隔开，例如： 1&lt;h1 class=&quot;speak big&quot;&gt;你好&lt;/h1&gt; 注： 1、id 属性值：尽量由字母、数字、下划线( _ )、短杠( - )组成，最好以字母开头、不要包含空 格、区分大小写。 2、一个元素只能拥有一个 id 属性，多个元素的 id 属性值不能相同。 3、一个元素可以同时拥有 id 和 class 属性。 2.复合选择器2.1交集选择器交集选择器中不可能出现两个元素选择器，因为一个元素，不可能即是 p 元素又是 span 元 素 用的最多的交集选择器是：元素选择器配合类名选择器，例如： p.beauty 。 12345678/* 选中：类名为beauty的p元素，为此种写法用的非常多！！！！ */p.beauty &#123; color: blue;&#125;/* 选中：类名包含rich和beauty的元素 */.rich.beauty &#123; color: green;&#125; 2.2 并集选择器12345678/* 选中id为peiqi，或类名为rich，或类名为beauty的元素 */#peiqi,.rich,.beauty &#123; font-size: 40px; background-color: skyblue; width: 200px;&#125; 2.3 后代选择器&#x20;&#x20;子、孙子、重孙子、重重孙子 …… 统称后代 12345678910111213141516/* 选中ul中的所有li */ul li &#123; color: red;&#125;/* 选中ul中所有li中的a */ul li a &#123; color: orange;&#125;/* 选中类名为subject元素中的所有li */.subject li &#123; color: blue;&#125;/* 选中类名为subject元素中的所有类名为front-end的li */.subject li.front-end &#123; color: blue;&#125; 2.4 子代选择器选择器之间，用 &gt; 隔开， &gt; 可以理解为：” xxx 的子代”，其实就是儿子的意思。 只选儿子 12345678/* div中的子代a元素 */div&gt;a &#123; color: red;&#125;/* 类名为persons的元素中的子代a元素 */.persons&gt;a&#123; color: red;&#125; 2.5 兄弟选择器2.5.1相邻兄弟选择器作用：选中指定元素后，符合条件的相邻兄弟元素。 所谓相邻，就是紧挨着他的下一个，简记：睡在我下铺的兄弟。 123456789101112131415161718&lt;html&gt; &lt;style&gt; /* 选中div后相邻的兄弟p元素 */ div+p &#123; color:red; &#125; &lt;/style&gt; &lt;body&gt; &lt;div&gt;test&lt;/div&gt; &lt;p&gt;1&lt;/p&gt; &lt;p&gt;2&lt;/p&gt; &lt;p&gt;3&lt;/p&gt; &lt;p&gt;4&lt;/p&gt; &lt;/body&gt;&lt;/html&gt; 使用场景： 想让23都变为红色 1234567891011121314&lt;html&gt; &lt;style&gt; li+li &#123; color:red; &#125; &lt;/style&gt; &lt;body&gt; &lt;ul&gt; &lt;li&gt;1&lt;/li&gt; &lt;li&gt;2&lt;/li&gt; &lt;li&gt;3&lt;/li&gt; &lt;/ul&gt; &lt;/body&gt;&lt;/html&gt; 2.5.2通用兄弟选择器作用：选中指定元素后，符合条件的所有兄弟元素。（简记：睡在我下铺的所有兄弟） 123456789101112131415&lt;html&gt; &lt;style&gt; /* 选中div后的所有的兄弟p元素 */ div~p &#123; color:red; &#125; &lt;/style&gt; &lt;body&gt; &lt;div&gt;test&lt;/div&gt; &lt;p&gt;1&lt;/p&gt; &lt;p&gt;2&lt;/p&gt; &lt;p&gt;3&lt;/p&gt; &lt;p&gt;4&lt;/p&gt; &lt;/body&gt;&lt;/html&gt; 注意：两种兄弟选择器，选择的是下面的兄弟。 2.6 属性选择器作用：选中属性值符合一定要求的元素。 语法： [属性名] 选中具有某个属性的元素。 [属性名&#x3D;”值”] 选中包含某个属性，且属性值等于指定值的元素。 [属性名^&#x3D;”值”] 选中包含某个属性，且属性值以指定的值开头的元素。 [属性名$&#x3D;”值”] 选中包含某个属性，且属性值以指定的值结尾的元素。 [属性名 *&#x3D;“值”] 选择包含某个属性，属性值包含指定值的元素 1234567891011/* 选中具有title属性的元素 */div[title]&#123;color:red;&#125;/* 选中title属性值为atguigu的元素 */div[title=&quot;atguigu&quot;]&#123;color:red;&#125;/* 选中title属性值以a开头的元素 */div[title^=&quot;a&quot;]&#123;color:red;&#125;/* 选中title属性值以u结尾的元素 */div[title$=&quot;u&quot;]&#123;color:red;&#125;/* 选中title属性值包含g的元素 */div[title*=&quot;g&quot;]&#123;color:red;&#125; 2.7 伪类选择器作用：选中特殊状态的元素。 2.7.1动态伪类1. :link 超链接未被访问的状态。 2. :visited 超链接访问过的状态。 3.:hover 鼠标悬停在元素上的状态。 4.:active 元素激活的状态。 激活：按下鼠标不松开。 注意点：遵循 LVHA 的顺序，即： link 、 visited 、 hover 、 active 。 5.:focus 获取焦点的元素。 表单类元素才能使用 :focus 伪类。 当用户点击元素、触摸元素、或通过键盘的 “ tab ” 键等方式，选择元素时，就是获得焦点。 2.7.2 结构伪类1.常用的 :first-child 所有兄弟元素中的第一个。 :last-child 所有兄弟元素中的最后一个。 :nth-child(n) 所有兄弟元素中的第 n 个。 :first-of-type 所有同类型兄弟元素中的第一个。 :last-of-type 所有同类型兄弟元素中的最后一个。 :nth-of-type(n) 所有同类型兄弟元素中的 第n个 。 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061&lt;!DOCTYPE html&gt;&lt;html lang=&quot;zh-CN&quot;&gt;&lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;title&gt;09_伪类选择器_结构伪类_1&lt;/title&gt; &lt;style&gt; /* 选中的是div的第一个儿子p元素（按照所有兄弟计算的） —— 看结构1 */ /* div&gt;p:first-child &#123; color: red; &#125; */ /* 选中的是div的第一个儿子p元素（按照所有兄弟计算的） —— 看结构2 选不到 因为span是第一个儿子*/ /* div&gt;p:first-child &#123; color: red; &#125; */ /* 选中的是div的后代p元素，且p的父亲是谁无所谓，但p必须是其父亲的第一个儿子（按照所有兄弟计算的） 所以测试三和测试二会变红—— 看结构3 */ /* div p:first-child &#123; color: red; &#125; */ /* 选中的是p元素，且p的父亲是谁无所谓，但p必须是其父亲的第一个儿子（按照所有兄弟计算的） —— 看结构3 测试一测试二测试三都变红 */ p:first-child &#123; color: red; &#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;!-- 结构1 --&gt; &lt;!-- &lt;div&gt; &lt;p&gt;张三：98分&lt;/p&gt; &lt;p&gt;李四：88分&lt;/p&gt; &lt;p&gt;王五：78分&lt;/p&gt; &lt;p&gt;赵六：68分&lt;/p&gt; &lt;/div&gt; --&gt; &lt;!-- 结构2 --&gt; &lt;!-- &lt;div&gt; &lt;span&gt;张三：98分&lt;/span&gt; &lt;p&gt;李四：88分&lt;/p&gt; &lt;p&gt;王五：78分&lt;/p&gt; &lt;p&gt;赵六：68分&lt;/p&gt; &lt;/div&gt; --&gt; &lt;!-- 结构3 --&gt; &lt;p&gt;测试1&lt;/p&gt; &lt;div&gt; &lt;p&gt;测试2&lt;/p&gt; &lt;marquee&gt; &lt;p&gt;测试3&lt;/p&gt; &lt;p&gt;张三：98分&lt;/p&gt; &lt;/marquee&gt; &lt;p&gt;李四：88分&lt;/p&gt; &lt;p&gt;王五：78分&lt;/p&gt; &lt;p&gt;赵六：68分&lt;/p&gt; &lt;/div&gt;&lt;/body&gt;&lt;/html&gt; 注：关于 n 的值： 0 或 不写 ：什么都选不中 —— 几乎不用。 n ：选中所有子元素 —— 几乎不用。 1~正无穷的整数 ：选中对应序号的子元素。 2n 或 even ：选中序号为偶数的子元素。 2n+1 或 odd ：选中序号为奇数的子元素。 -n+3 ：选中的是前 3 个。 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182838485868788899091&lt;!DOCTYPE html&gt;&lt;html lang=&quot;zh-CN&quot;&gt;&lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;title&gt;10_伪类选择器_结构伪类_2&lt;/title&gt; &lt;style&gt; /* 选中的是div的第一个儿子p元素（按照所有兄弟计算的）—— 结构1*/ /* div&gt;p:first-child &#123; color: red; &#125; */ /* 选中的是div的最后一个儿子p元素（按照所有兄弟计算的）—— 结构1*/ /* div&gt;p:last-child &#123; color: red; &#125; */ /* 选中的是div的第n个儿子p元素（按照所有兄弟计算的）—— 结构1 */ /* div&gt;p:nth-child(3) &#123; color: red; &#125; */ /* 选中的是div的偶数个儿子p元素（按照所有兄弟计算的）—— 结构2 */ /* 关于n的值 —— 结构2： 1. 0或不写：什么都选不中 —— 几乎不用。 2. n ：选中所有子元素 —— 几乎不用。 3. 1 ~ 正无穷的整数，选中对应序号的子元素。 4. 2n 或 even ：选中序号为偶数的子元素。 5. 2n+1 或 odd ：选中序号为奇数的子元素。 6. -n+3 : 选中前三个。 */ /* div&gt;p:nth-child(2n) &#123; color: red; &#125; */ /* 选中的是div的第一个儿子p元素（按照所有同类型兄弟计算的）—— 结构3 */ /* div&gt;p:first-of-type&#123; color: red; &#125; */ /* 选中的是div的最后一个儿子p元素（按照所有同类型兄弟计算的）—— 结构3 */ /* div&gt;p:last-of-type&#123; color: red; &#125; */ /* 选中的是div的第n个儿子p元素（按照所有同类型兄弟计算的）—— 结构3 */ /* div&gt;p:nth-of-type(5) &#123; color: red; &#125; */ &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;!-- 结构1 --&gt; &lt;!-- &lt;div&gt; &lt;p&gt;张三：98分&lt;/p&gt; &lt;p&gt;李四：88分&lt;/p&gt; &lt;p&gt;王五：78分&lt;/p&gt; &lt;p&gt;赵六：68分&lt;/p&gt; &lt;p&gt;孙七：58分&lt;/p&gt; &lt;p&gt;老八：48分&lt;/p&gt; &lt;/div&gt; --&gt; &lt;!-- 结构2 --&gt; &lt;!-- &lt;div&gt; &lt;p&gt;第1个&lt;/p&gt; &lt;p&gt;第2个&lt;/p&gt; &lt;p&gt;第3个&lt;/p&gt; &lt;p&gt;第4个&lt;/p&gt; &lt;p&gt;第5个&lt;/p&gt; &lt;p&gt;第6个&lt;/p&gt; &lt;p&gt;第7个&lt;/p&gt; &lt;p&gt;第8个&lt;/p&gt; &lt;p&gt;第9个&lt;/p&gt; &lt;p&gt;第10个&lt;/p&gt; &lt;/div&gt; --&gt; &lt;!-- 结构3 --&gt; &lt;!-- &lt;div&gt; &lt;span&gt;测试1&lt;/span&gt; &lt;p&gt;张三：98分&lt;/p&gt; &lt;p&gt;李四：88分&lt;/p&gt; &lt;p&gt;王五：78分&lt;/p&gt; &lt;span&gt;测试2&lt;/span&gt; &lt;p&gt;赵六：68分&lt;/p&gt; &lt;span&gt;测试3&lt;/span&gt; &lt;p&gt;孙七：58分&lt;/p&gt; &lt;span&gt;测试4&lt;/span&gt; &lt;p&gt;老八：48分&lt;/p&gt; &lt;span&gt;测试5&lt;/span&gt; &lt;/div&gt; --&gt;&lt;/body&gt;&lt;/html&gt; 了解： :nth-last-child(n) 所有兄弟元素中的倒数第 n 个。 :nth-last-of-type(n) 所有同类型兄弟元素中的 倒数第n个 。 :only-child 选择没有兄弟的元素（独生子女）。 :only-of-type 选择没有同类型兄弟的元素。 :root 根元素。 :empty 内容为空元素（空格也算内容）。 2.7.3 否定伪类:not(选择器) 排除满足括号中条件的元素。 123456789101112131415161718192021222324252627282930313233&lt;!DOCTYPE html&gt;&lt;html lang=&quot;zh-CN&quot;&gt;&lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;title&gt;12_伪类选择器_否定伪类&lt;/title&gt; &lt;style&gt; /* 选中的是div的儿子p元素，但是排除类名为fail的元素 */ /* div&gt;p:not(.fail) &#123; color: red; &#125; */ /* 选中的是div的儿子p元素，但是排除title属性值以“你要加油”开头的 */ /* div&gt;p:not([title^=&quot;你要加油&quot;]) &#123; color: red; &#125; */ /* 选中的是div的儿子p元素，但排除第一个儿子p元素 */ div&gt;p:not(:first-child) &#123; color: red; &#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;div&gt; &lt;p&gt;张三：98分&lt;/p&gt; &lt;p&gt;李四：88分&lt;/p&gt; &lt;p&gt;王五：78分&lt;/p&gt; &lt;p&gt;赵六：68分&lt;/p&gt; &lt;p class=&quot;fail&quot; title=&quot;你要加油啊！孙七&quot;&gt;孙七：58分&lt;/p&gt; &lt;p class=&quot;fail&quot; title=&quot;你要加油啊！老八&quot;&gt;老八：48分&lt;/p&gt; &lt;/div&gt;&lt;/body&gt;&lt;/html&gt; 2.7.4 UI伪类:checked 被选中的复选框或单选按钮。 :enable 可用的表单元素（没有 disabled 属性） :disabled 不可用的表单元素（有 disabled 属性）。 2.7.3 目标伪类:target 选中锚点指向的元素 2.7.4 语言伪类:lang() 根据指定的语言选择元素（本质是看 lang 属性的值）。 2.8 伪元素选择器作用：选中元素中的一些特殊位置。 常用伪元素： ::first-letter 选中元素中的第一个文字。 ::first-line 选中元素中的第一行文字。 ::selection 选中被鼠标选中的内容。 ::placeholder 选中输入框的提示文字。 ::before 在元素最开始的位置，创建一个子元素（必须用 content 属性指定内容）。 ::after 在元素最后的位置，创建一个子元素（必须用 content 属性指定内容）。 12345678910111213141516171819202122232425262728293031323334353637383940414243444546&lt;!DOCTYPE html&gt;&lt;html lang=&quot;zh-CN&quot;&gt;&lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;title&gt;16_伪元素选择器&lt;/title&gt; &lt;style&gt; /* 什么是伪元素？ —— 很像元素，但不是元素（element），是元素中的一些特殊位置 */ /* 选中的是div中的第一个文字 */ div::first-letter &#123; color: red; font-size: 40px; &#125; /* 选中的是div中的第一行文字 */ div::first-line &#123; background-color: yellow; &#125; /* 选中的是div中被鼠标选择的文字 */ div::selection &#123; background-color: green; color: orange; &#125; /* 选中的是input元素中的提示文字 */ input::placeholder &#123; color: skyblue; &#125; /* 选中的是p元素最开始的位置，随后创建一个子元素 */ p::before &#123; content:&quot;￥&quot;; &#125; /* 选中的是p元素最后的位置，随后创建一个子元素 */ p::after &#123; content:&quot;.00&quot; &#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;div&gt;Lorem ipsum dolor sit amet consectetur adipisicing elit. Sunt quibusdam amet eligendi velit dolore sequi, exercitationem consequatur, quis maiores tempore accusantium ipsum aspernatur iusto fugiat fuga natus est placeat. Accusamus maiores culpa et sunt dolorum incidunt. Ducimus in odio tempora minima provident deleniti, ex voluptatem facere, molestias unde exercitationem pariatur rem vero ut quidem quaerat aliquam, nam debitis perspiciatis. Facere?&lt;/div&gt; &lt;br&gt; &lt;input type=&quot;text&quot; placeholder=&quot;请输入您的用户名&quot;&gt; &lt;p&gt;199&lt;/p&gt; &lt;p&gt;299&lt;/p&gt; &lt;p&gt;399&lt;/p&gt; &lt;p&gt;499&lt;/p&gt;&lt;/body&gt;&lt;/html&gt; 3.选择器优先级行内样式 &gt; ID选择器 &gt; 类选择器 &gt; 元素选择器 &gt; 通配选择器。 详细描述： 计算方式：每个选择器，都可计算出一组权重，格式为： (a,b,c) a : ID 选择器的个数。 b : 类、伪类、属性 选择器的个数。 c : 元素、伪元素 选择器的个数。 比较规则：按照从左到右的顺序，依次比较大小，当前位胜出后，后面的不再对比，例如： (1,0,0) &gt; (0,2,2) (1,1,0) &gt; (1,0,3) (1,1,3) &gt; (1,1,2) 特殊规则： 行内样式权重大于所有选择器。 !important 的权重，大于行内样式，大于所有选择器，权重最高！","tags":["html","前端"],"categories":["html"]},{"title":"样式表优先级","path":"/2024/01/15/样式表优先级/","content":"优先级规则：行内样式 &gt; 内部样式 &#x3D; 外部样式 遵循后来者居上原则。CSS写在后面的起作用。","tags":["html","前端"],"categories":["html"]},{"title":"H5新增内容","path":"/2024/01/15/H5/","content":"1、语义化标签1.1 布局标签 关于 article 和 section ： artical 里面可以有多个 section 。 section 强调的是分段或分块，如果你想将一块内容分成几段的时候，可使用 section 元素。 article 比 section 更强调独立性，一块内容如果比较独立、比较完整，应该使用article 元素。 1.2 状态标签1、meter标签 语义：定义已知范围内的标量测量。也被称为 gauge （尺度），双标签，例如：电量、磁盘用量 等。 常用属性： 2、progeress标签 语义：显示某个任务完成的进度的指示器，一般用于表示进度条，双标签，例如：工作完成进度 等。 1.3列表标签 1.4新增文本标签1、文本注音 1234&lt;ruby&gt;&lt;span&gt;魑魅魍魉&lt;/span&gt;&lt;rt&gt;chī mèi wǎng liǎng &lt;/rt&gt;&lt;/ruby&gt; 2、文本标记 2、新增表单功能2.1表单控件新增属性 2.2 input新增属性值 2.3 form新增属性 3 多媒体标签3.1 视频标签&lt;video&gt; 标签用来定义视频，它是双标签。 3.2 音频标签 4.新增全局属性 5. 兼容性处理添加元信息，让浏览器处于最优渲染模式。 1234&lt;!--设置IE总是使用最新的文档模式进行渲染--&gt;&lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=Edge&quot;&gt;&lt;!--优先使用 webkit ( Chromium ) 内核进行渲染, 针对360等壳浏览器--&gt;&lt;meta name=&quot;renderer&quot; content=&quot;webkit&quot;&gt; 使用 html5shiv 让低版本浏览器认识 的语义化标签。 123&lt;!--[if lt ie 9]&gt;&lt;script src=&quot;../sources/js/html5shiv.js&quot;&gt;&lt;/script&gt;&lt;![endif]--&gt; 扩展 lt 小于 lte 小于等于 gt 大于 gte 大于等于 ! 逻辑非 示例： 123456&lt;!--[if IE 8]&gt;仅IE8可见&lt;![endif]--&gt;&lt;!--[if gt IE 8]&gt;仅IE8以上可见&lt;![endif]—&gt;&lt;!--[if lt IE 8]&gt;仅IE8以下可见&lt;![endif]—&gt;&lt;!--[if gte IE 8]&gt;IE8及以上可见&lt;![endif]—&gt;&lt;!--[if lte IE 8]&gt;IE8及以下可见&lt;![endif]—&gt;&lt;!--[if !IE 8]&gt;非IE8的IE可见&lt;![endif]--&gt;","tags":["html","前端"],"categories":["html"]},{"title":"补充标签","path":"/2024/01/15/补充标签/","content":"&lt; br&gt;换行 &lt; pre&gt;按原文显示 &lt; hr&gt;分割 隐藏域： &lt;input type&#x3D;”hidden” name&#x3D;”tag” value&#x3D;”100” &gt; 用户不可见的一个输入区域，作用是： 提交表单的时候，携带一些固定的数据。 name 属性：指定数据的名称。 value 属性：指定的是真正提交的数据。 &lt;label&gt;: label 标签可与表单控件相关联，关联之后点击文字，与之对应的表单控件就会获取焦点。 两种与 label 关联方式如下： 让 label 标签的 for 属性的值等于表单控件的 id 。 把表单控件套在 label 标签的里面。 &lt;iframe&gt;嵌入内容","tags":["html","前端"],"categories":["html"]},{"title":"表格","path":"/2024/01/15/表格/","content":"结构 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556&lt;table border=&quot;1&quot;&gt;&lt;!-- 表格标题 --&gt;&lt;caption&gt;学生信息&lt;/caption&gt;&lt;!-- 表格头部 --&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;姓名&lt;/th&gt;&lt;th&gt;性别&lt;/th&gt;&lt;th&gt;年龄&lt;/th&gt;&lt;th&gt;民族&lt;/th&gt;&lt;th&gt;政治面貌&lt;/th&gt;&lt;/tr&gt;&lt;/thead&gt;2. 常用属性&lt;!-- 表格主体 --&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;张三&lt;/td&gt;&lt;td&gt;男&lt;/td&gt;&lt;td&gt;18&lt;/td&gt;&lt;td&gt;汉族&lt;/td&gt;&lt;td&gt;团员&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;李四&lt;/td&gt;&lt;td&gt;女&lt;/td&gt;&lt;td&gt;20&lt;/td&gt;&lt;td&gt;满族&lt;/td&gt;&lt;td&gt;群众&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;王五&lt;/td&gt;&lt;td&gt;男&lt;/td&gt;&lt;td&gt;20&lt;/td&gt;&lt;td&gt;回族&lt;/td&gt;&lt;td&gt;党员&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;赵六&lt;/td&gt;&lt;td&gt;女&lt;/td&gt;&lt;td&gt;21&lt;/td&gt;&lt;td&gt;壮族&lt;/td&gt;&lt;td&gt;团员&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;!-- 表格脚注 --&gt;&lt;tfoot&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td&gt;&lt;/td&gt;&lt;td&gt;&lt;/td&gt;&lt;td&gt;&lt;/td&gt;&lt;td&gt;共计：4人&lt;/td&gt;&lt;/tr&gt;&lt;/tfoot&gt;&lt;/table&gt; 属性 一般table的属性height意义为最小高度。table会通过自动调整tbody来让整个table高度达到最小高度。","tags":["html","前端"],"categories":["html"]},{"title":"字符实体","path":"/2024/01/15/字符实体/","content":"空格的字符实体&amp;nbsp; &amp;#160 标签&lt;&gt;的字符实体&amp;lt; h1 &amp;gt; &amp;的字符实体&amp;amp;&#x20; 人民币的字符实体&amp;yen; 版权的字符实体&amp;copy; 乘号的字符实体&amp;times; 除号的字符实体&amp;divide;","tags":["html","前端"],"categories":["html"]},{"title":"块级元素、行内元素、行内块元素","path":"/2024/01/15/块级元素、行内元素、行内块元素/","content":"块级元素blockquote、address 独占一行。 行内元素文本标签（&lt;em&gt;&lt;strong&gt;&lt;span&gt;&lt;a&gt;等） 不独占一行 规则1：块级元素中能写行内元素、块级元素。 规则2：行内元素中能写行内元素，不能写块级元素 特殊规则: H1-H6不能嵌套 特殊规则：p标签中不能写块元素 特殊规则：a标签内可以包含除自身之外的任何元素 行内块元素IMG","tags":["html","前端"],"categories":["html"]},{"title":"函数式组件","path":"/2023/06/28/函数式组件/","content":"12345678910111213141516171819&lt;html lang=&quot;en&quot;&gt;&lt;head&gt; &lt;title&gt;Document&lt;/title&gt;&lt;/head&gt;&lt;body&gt; &lt;div id=&quot;test&quot;&gt; &lt;/div&gt;&lt;/body&gt;&lt;script src=&quot;../react.development.js&quot; type=&quot;text/javascript&quot;&gt;&lt;/script&gt;&lt;script src=&quot;../react-dom.development.js&quot; type=&quot;text/javascript&quot;&gt;&lt;/script&gt;&lt;script src=&quot;../babel.min.js&quot; type=&quot;text/javascript&quot;&gt;&lt;/script&gt;&lt;script type=&quot;text/babel&quot;&gt;function demo()&#123;console.log(this);//此处的this是undefined，因为babel编译后开启了严格模式return &lt;h2&gt;我是用函数定义的组件&lt;/h2&gt;&#125; &lt;/script&gt;&lt;/html&gt;","tags":["前端","react","组件"],"categories":["react"]},{"title":"jsx基础知识","path":"/2023/06/18/jsx/","content":"jsx语法JSX是类似于XML的js扩展语法，其本质是React.createElement(component,props,…children)方法的语法糖 注：XML早期用于存储和传输数据。 XML格式如下： 1234&lt;student&gt;&lt;name&gt;Tom&lt;/name&gt;&lt;age&gt;19&lt;/age&gt;&lt;/student&gt; JSON格式如下： 1&quot;&#123;&quot;name&quot;：&quot;Tom&quot;,&quot;age&quot;:19&#125;&quot; jsx语法规则1、定义虚拟DOM时，不要写引号。 12345const VDOM=( /* 此处一定不要写引号，因为不是字符串 */ &lt;h1 id=&quot;test&quot;&gt; &lt;span&gt;Hello,React&lt;/span&gt; &lt;/h1&gt;)//2.渲染虚拟DOM到页面ReactDOM.render(VDOM,document.getElementById(&#x27;test&#x27;)). 2、标签里如果要用JS的表达式，要用{}。 1234567const myID=&quot;Test&quot;;const string1=&quot;Hello,React&quot;const VDOM=( /* 此处一定不要写引号，因为不是字符串 */ &lt;h1 id=&#123;myID.toLowerCase()&#125;&gt; &lt;span&gt;&#123;string1.toLowerCase()&#125;&lt;/span&gt; &lt;/h1&gt;)//2.渲染虚拟DOM到页面ReactDOM.render(VDOM,document.getElementById(&#x27;test&#x27;)). 3、写样式时指定类名不用class，用className。 1234567const myID=&quot;Test&quot;;const string1=&quot;Hello,React&quot;const VDOM=( /* 此处一定不要写引号，因为不是字符串 */ &lt;h1 className=&quot;title&quot; id=&#123;myID.toLowerCase()&#125;&gt; &lt;span&gt;&#123;string1.toLowerCase()&#125;&lt;/span&gt; &lt;/h1&gt;)//2.渲染虚拟DOM到页面ReactDOM.render(VDOM,document.getElementById(&#x27;test&#x27;)). 12345&lt;style&gt;.title&#123;background:red;&#125;&lt;/style&gt; 4、写内联样式时用style&#x3D;\"{{kay:value}}\"的样式。 1234567const myID=&quot;Test&quot;;const string1=&quot;Hello,React&quot;const VDOM=( /* 此处一定不要写引号，因为不是字符串 */ &lt;h1 className=&quot;title&quot; id=&#123;myID.toLowerCase()&#125;&gt; &lt;span style=&#123;&#123;color:&#x27;white&#x27;,fontSize:&#x27;29px&#x27;&#125;&#125;&gt;&#123;string1.toLowerCase()&#125;&lt;/span&gt; &lt;/h1&gt;)//2.渲染虚拟DOM到页面ReactDOM.render(VDOM,document.getElementById(&#x27;test&#x27;)). 5、虚拟DOM必须只有一个根标签。 6、标签必须闭合。 7、标签首字母 1）若小写字母开头，则将标签转为html中同名元素，若html中不存在同名元素，则报错。 2）若大写字母开头，react就去渲染对应的组件，若组件没有定义，则报错。 注：区分js语句和js表达式 1、表达式：会产生一个值，可以放在任何一个需要值的地方。如a、a+b、demo(1)、arr.map()、function test（）{} 2、语句（代码）： 比如if(){}、for(){}、switch（）{case: ….}","tags":["前端","react","jsx"],"categories":["react"]},{"title":"虚拟DOM创建","path":"/2023/06/18/虚拟DOM创建/","content":"1.用jsx创建虚拟DOM1234const VDOM=( /* 此处一定不要写引号，因为不是字符串 */ &lt;h1 id=&quot;title&quot;&gt; &lt;span&gt;Hello,React&lt;/span&gt; &lt;/h1&gt;)ReactDOM.render(VDOM,document.querySelector(&#x27;.test&#x27;)) 2.用js创建虚拟DOM1234//1.创建虚拟DOM,创建嵌套格式的domconst VDOM=React.createElement(&#x27;h1&#x27;,&#123;id:&#x27;title&#x27;&#125;,React.createElement(&#x27;span&#x27;,&#123;&#125;,&#x27;hello,React&#x27;))//2.渲染虚拟DOM到页面ReactDOM.render(VDOM,document.querySelector(&#x27;.test&#x27;)). 3.虚拟DOM与真实DOM的区别1、虚拟DOM本质上就是Object类型的对象 2、虚拟DOM较为轻量级，真实DOM较为重量级，因为虚拟DOM运用于React内部，无需真实DOM上的过多属性。 3、虚拟DOM最终会被React转化为真实DOM。","tags":["前端","react"],"categories":["react"]},{"title":"类式组件","path":"/2023/06/18/类式组件/","content":"类123456789101112131415161718192021222324252627282930&lt;script type=&quot;text/javascript&quot;&gt;class Person&#123;constructor(name,age)&#123;//构造器方法//构造器中的this是类的实例对象this.name=namethis.age=age&#125;//一般方法speak()&#123;//speak方法放在了类的原型对象上，供实例使用console.log(`我叫$(this.name),我的年龄是$(this.age)`)&#125;&#125;class Student extends Person&#123; constructor(name,age,grade)&#123; super(name,age) this.grade=grade; &#125; speak()&#123; console.log(`我叫$&#123;this.name&#125;,我的年龄是$&#123;this.age&#125;,我的年纪是$&#123;this.grade&#125;`) &#125;&#125;const p1=new Person(&#x27;tom&#x27;,18)const p2=new Person(&#x27;jerry&#x27;,19)const s1=new Student(&#x27;zhang&#x27;,15,&#x27;高一&#x27;)p1.speak()p2.speak()s1.speak()&lt;/script&gt; 注： 1、类的构造器不是一定要写的 2、如果a类继承于b类，且a类中写了构造器，则a类构造器中super必须要调用。 3、类定义的方法，都放在类的原型对象上，共实例使用 创建类组件12345678910111213&lt;script type=&quot;text/babel&quot;&gt;class MyComponent extends React.Component&#123;//这里Component的c要大写//render是放在MyComponent原型对象上，供实例使用的render()&#123;return&#123;//render中的this是MyComponent的实例对象&lt;h2&gt;我是类定义的组件&lt;/h2&gt;&#125;&#125;&#125;ReactDOM.render(&lt;MyComponent/&gt;,document.getElementById(&#x27;test&#x27;))&lt;/script&gt; 执行ReactDOM.render（&lt;MyComponent&#x2F;&gt;）之后。发生了什么？ 1、react解析组件标签，找到MyComponent组件 2、发现组件是使用类定义的，随后new出该类的实例，并通过该实例调用到原型上的render方法 3、将render返回的虚拟dom转为真实dom，随后呈现在页面中。","tags":["前端","react","组件"],"categories":["react"]},{"title":"Hello","path":"/2023/04/15/testlx/","content":"Do not go gentle into that good night.","tags":["随笔"],"categories":["随笔"]}]