[{"title":"BFC","path":"/2024/01/16/9.BFC/","content":"9.1 BFC的定义W3C 上对 BFC 的定义： 译文：浮动、绝对定位元素、不是块盒子的块容器（如 inline-blocks 、 table-cells 和table-captions ），以及 overflow 属性的值除 visible 以外的块盒，将为其内容建立新的块格式化上下文。 MDN 上对 BFC 的描述： 块格式化上下文（Block Formatting Context，BFC） 是 Web 页面的可视 CSS 渲染的一部分，是块盒子的布局过程发生的区域，也是浮动元素与其他元素交互的区域。 更加通俗的描述： BFC 是 Block Formatting Context （块级格式上下文），可以理解成元素的一个“特异功能”。 &#x20;该 “特异功能”，在默认的情况下处于关闭状态；当元素满足了某些条件后，该“特异功能”被激活。 所谓激活“特异功能”，专业点说就是：该元素创建了 BFC （又称：开启了 BFC ）。 9.2 开启了BFC能解决什么问题 元素开启 BFC 后，其子元素不会再产生 margin 塌陷问题。 元素开启 BFC 后，自己不会被其他浮动元素所覆盖。 元素开启 BFC 后，就算其子元素浮动，元素自身高度也不会塌陷。 9.3 如何开启BFC 根元素 浮动元素 绝对定位、固定定位的元素 行内块元素 表格单元格： table 、 thead 、 tbody 、 tfoot 、 th 、 td 、 tr 、 caption overflow 的值不为 visible 的块元素 伸缩项目 多列容器 column-span 为 all 的元素（即使该元素没有包裹在多列容器中） display 的值，设置为 flow-root 例子1：解决margin塌陷问题 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849&lt;!DOCTYPE html&gt;&lt;html lang=&quot;zh-CN&quot;&gt;&lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;title&gt;01_BFC_演示1&lt;/title&gt; &lt;style&gt; * &#123; margin: 0; padding: 0; &#125; body &#123; /* display: flex; */ &#125; .outer &#123; width: 400px; background-color: #888; /* float: left; */ /* position: absolute; */ /* display: inline-block; */ /* display: table; */ /* overflow: auto; */ /* column-count: 1; */ /* display: flow-root; */ &#125; .inner &#123; width: 100px; height: 100px; margin: 20px; &#125; .inner1 &#123; background-color: orange; &#125; .inner2 &#123; background-color: green; &#125; .inner3 &#123; background-color: deepskyblue; &#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;div class=&quot;outer&quot;&gt; &lt;div class=&quot;inner inner1&quot;&gt;&lt;/div&gt; &lt;div class=&quot;inner inner2&quot;&gt;&lt;/div&gt; &lt;div class=&quot;inner inner3&quot;&gt;&lt;/div&gt; &lt;/div&gt; &lt;!-- &lt;hr style=&quot;height: 50px; background-color: red;&quot;&gt; --&gt;&lt;/body&gt;&lt;/html&gt; 例子2：解决float元素遮挡问题 12345678910111213141516171819202122232425262728293031&lt;!DOCTYPE html&gt;&lt;html lang=&quot;zh-CN&quot;&gt;&lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;title&gt;02_BFC_演示2&lt;/title&gt; &lt;style&gt; .box &#123; width: 100px; height: 100px; &#125; .box1 &#123; background-color: orange; float: left; &#125; .box2 &#123; background-color: green; /* float: left; */ /* position: absolute; */ /* display: inline-block; */ /* display: table; */ /* overflow: auto; */ /* column-count: 1; */ /* display: flow-root; */ &#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;div class=&quot;box box1&quot;&gt;&lt;/div&gt; &lt;div class=&quot;box box2&quot;&gt;&lt;/div&gt;&lt;/body&gt;&lt;/html&gt; 例子3：解决子元素浮动，父元素高度塌陷问题 12345678910111213141516171819202122232425262728293031323334353637&lt;!DOCTYPE html&gt;&lt;html lang=&quot;zh-CN&quot;&gt;&lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;title&gt;03_BFC_演示3&lt;/title&gt; &lt;style&gt; .outer &#123; width: 400px; background-color: #888; /* float: left; */ /* position: absolute; */ /* display: inline-block; */ /* display: table; */ /* overflow: auto; */ /* column-count: 1; */ display: flow-root; &#125; .inner &#123; width: 100px; height: 100px; float: left; &#125; .inner1 &#123; background-color: orange; &#125; .inner2 &#123; background-color: green; &#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;div class=&quot;outer&quot;&gt; &lt;div class=&quot;inner inner1&quot;&gt;&lt;/div&gt; &lt;div class=&quot;inner inner2&quot;&gt;&lt;/div&gt; &lt;/div&gt;&lt;/body&gt;&lt;/html&gt;","tags":["CSS","前端","CSS3"],"categories":["CSS"]},{"title":"响应式布局","path":"/2024/01/16/8.响应式布局/","content":"8.1 媒体查询1.媒体类型 1234567891011121314151617181920212223242526272829303132333435363738394041424344&lt;!DOCTYPE html&gt;&lt;html lang=&quot;zh-CN&quot;&gt;&lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;title&gt;01_媒体查询_媒体类型&lt;/title&gt; &lt;style&gt; h1 &#123; width: 600px; height: 400px; line-height: 400px; background-image: linear-gradient(30deg,red,yellow,green); margin: 0 auto; text-align: center; font-size: 100px; color: white; text-shadow: 0 0 10px black; &#125; /* 只有在打印机或打印预览才应用的样式 */ @media print &#123; h1 &#123; background: transparent; &#125; &#125; /* 只有在屏幕上才应用的样式 */ @media screen &#123; h1 &#123; font-family: &quot;翩翩体-简&quot;; &#125; &#125; /* 一直都应用的样式 */ @media all &#123; h1 &#123; color: red; &#125; &#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;h1&gt;新年快乐&lt;/h1&gt;&lt;/body&gt;&lt;/html&gt; 2.媒体特性 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960&lt;!DOCTYPE html&gt;&lt;html lang=&quot;zh-CN&quot;&gt;&lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;title&gt;02_媒体查询_媒体特性&lt;/title&gt; &lt;style&gt; * &#123; margin: 0; padding: 0; &#125; h1 &#123; height: 200px; background-color: gray; text-align: center; line-height: 200px; font-size: 100px; &#125; /* 检测到视口的宽度为800px时，应用如下样式 */ @media (width:800px) &#123; h1 &#123; background-color: green; &#125; &#125; /* 检测到视口的宽度小于等于700px时，应用如下样式 */ @media (max-width:700px) &#123; h1 &#123; background-color: orange; &#125; &#125; /* 检测到视口的宽度大于等于900px时，应用如下样式 */ @media (min-width:900px) &#123; h1 &#123; background-color: deepskyblue; &#125; &#125; /* 检测到视口的高度等于800px时，应用如下样式 */ /* @media (height:800px)&#123; h1 &#123; background-color: yellow; &#125; &#125; */ /* 检测到屏幕的宽度等于1536px时，应用如下样式 */ /* @media (device-width:1536px) &#123; h1 &#123; color: white; &#125; &#125; */ &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;h1&gt;你好啊&lt;/h1&gt;&lt;/body&gt;&lt;/html&gt; 3.运算符 only为了处理ie的兼容性问题。让ie直接不认识。 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657&lt;!DOCTYPE html&gt;&lt;html lang=&quot;zh-CN&quot;&gt;&lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;title&gt;03_媒体查询_运算符&lt;/title&gt; &lt;style&gt; * &#123; margin: 0; padding: 0; &#125; h1 &#123; height: 200px; background-color: gray; text-align: center; line-height: 200px; font-size: 100px; &#125; /* 且运算符 */ /* @media (min-width:700px) and (max-width:800px) &#123; h1 &#123; background-color: orange; &#125; &#125; */ /* @media screen and (min-width:700px) and (max-width:800px) &#123; h1 &#123; background-color: orange; &#125; &#125; */ /* 或运算符 */ /* @media screen and (max-width:700px) or (min-width:800px) &#123; h1 &#123; background-color: orange; &#125; &#125; */ /* 否定运算符 */ /* @media not screen &#123; h1 &#123; background-color: orange; &#125; &#125; */ /* 肯定运算符 */ @media only screen and (width:800px) &#123; h1 &#123; background-color: orange; &#125; &#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;h1&gt;你好啊&lt;/h1&gt;&lt;/body&gt;&lt;/html&gt; 4.常用阈值 5.结合外部样式的写法用法一： 1&lt;link rel=&quot;stylesheet&quot; media=&quot;具体的媒体查询&quot; href=&quot;mystylesheet.css&quot;&gt; 用法二： 123@media screen and (max-width:768px) &#123;/CSS-Code;/&#125;","tags":["CSS","前端","CSS3"],"categories":["CSS"]},{"title":"伸缩盒模型","path":"/2024/01/16/7.伸缩盒模型/","content":"传统布局是指：基于传统盒状模型，主要靠： display 属性 + position 属性 + float属性。 flex 布局目前在移动端应用比较广泛，因为传统布局不能很好的呈现在移动设备上 1.伸缩容器、伸缩项目 伸缩容器： 开启了 flex 的元素，就是：伸缩容器。 给元素设置： display:flex 或 display:inline-flex ，该元素就变为了伸缩容器。 display:inline-flex 很少使用，因为可以给多个伸缩容器的父容器，也设置为伸缩容器。 一个元素可以同时是：伸缩容器、伸缩项目。 伸缩项目：伸缩容器所有子元素自动成为了：伸缩项目。 仅伸缩容器的子元素成为了伸缩项目，孙子元素、重孙子元素等后代，不是伸缩项目。 无论原来是哪种元素（块、行内块、行内），一旦成为了伸缩项目，全都会“块状化”。 2.主轴与侧轴主轴： 伸缩项目沿着主轴排列，主轴默认是水平的，默认方向是：从左到右（左边是起点，右边是终点）。 侧轴： 与主轴垂直的就是侧轴，侧轴默认是垂直的，默认方向是：从上到下（上边是起点，下边是终点）。 3.主轴方向属性名： flex-direction 常用值如下： row ：主轴方向水平从左到右 —— 默认值 row-reverse ：主轴方向水平从右到左。 column ：主轴方向垂直从上到下。 column-reverse ：主轴方向垂直从下到上 注意：改变了主轴的方向，侧轴方向也随之改变。 4.主轴换行方式属性名： flex-wrap 常用值如下： nowrap ：默认值，不换行。 wrap ：自动换行，伸缩容器不够自动换行。 wrap-reverse ：反向换行。 5.flex-flowflex-flow 是一个复合属性，复合了 flex-direction 和 flex-wrap 两个属性。 值没有顺序要求。 flex-flow: row wrap; 6.主轴对齐方式属性名： justify-content 常用值如下： flex-start ：主轴起点对齐。—— 默认值 flex-end ：主轴终点对齐。 center ：居中对齐 space-between ：均匀分布，两端对齐（最常用）。 space-around ：均匀分布，两端距离是中间距离的一半。 space-evenly ：均匀分布，两端距离与中间距离一致。 7.侧轴对齐方式7.1 一行的情况所需属性： align-items 常用值如下： flex-start ：侧轴的起点对齐。 flex-end ：侧轴的终点对齐。 center ：侧轴的中点对齐。 baseline : 伸缩项目的第一行文字的基线对齐。 stretch ：如果伸缩项目未设置高度，将占满整个容器的高度。—— （默认值） 7.2 多行的情况所需属性： align-content 常用值如下： flex-start ：与侧轴的起点对齐。 flex-end ：与侧轴的终点对齐。 center ：与侧轴的中点对齐。 space-between ：与侧轴两端对齐，中间平均分布。 space-around ：伸缩项目间的距离相等，比距边缘大一倍。 space-evenly : 在侧轴上完全平分。 stretch ：占满整个侧轴。—— 默认值 flex-start 8.伸缩性8.1 flex-basis 概念： flex-basis 设置的是主轴方向的基准长度，会让宽度或高度失效。 备注：主轴横向：宽度失效；主轴纵向：高度失效 作用：浏览器根据这个属性设置的值，计算主轴上是否有多余空间，默认值 auto ，即：伸缩项目的宽或高。 8.2 flex-grow（伸） 概念： flex-grow 定义伸缩项目的放大比例，默认为 0 ，即：纵使主轴存在剩余空间，也不拉伸（放大）。 规则： 若所有伸缩项目的 flex-grow 值都为 1 ，则：它们将等分剩余空间（如果有空间的话）。 若三个伸缩项目的 flex-grow 值分别为： 1 、 2 、 3 ，则：分别瓜分到： 1&#x2F;6 、 2&#x2F;6 、3&#x2F;6 的空间。 8.3 flex-shrink（缩） 概念： flex-shrink 定义了项目的压缩比例，默认为 1 ，即：如果空间不足，该项目将会缩小。 收缩项目的计算，略微复杂一点，我们拿一个场景举例： 例如： 三个收缩项目，宽度分别为： 200px 、 300px 、 200px ，它们的 flex-shrink 值分别 为： 1 、 2 、 3 若想刚好容纳下三个项目，需要总宽度为 700px ，但目前容器只有 400px ，还差300px 所以每个人都要收缩一下才可以放下，具体收缩的值，这样计算： 计算分母： (200×1) + (300×2) + (200×3) &#x3D; 1400 计算比例： 项目一： (200×1) &#x2F; 1400 &#x3D; 比例值1 项目二： (300×2) &#x2F; 1400 &#x3D; 比例值2 计算最终收缩大小： 项目一需要收缩： 比例值1 × 300 项目二需要收缩： 比例值2 × 300 项目三需要收缩： 比例值3 × 300 9. flex复合属性flex 是复合属性，复合了： flex-grow 、 flex-shrink 、 flex-basis 三个属性，默认值为 0 1 auto 。 如果写 flex:1 1 auto ，则可简写为： flex:auto 如果写 flex:1 1 0 ，则可简写为： flex:1 如果写 flex:0 0 auto ，则可简写为： flex:none 如果写 flex:0 1 auto ，则可简写为： flex:0 auto —— 即 flex 初始值。 10. 项目排序order 属性定义项目的排列顺序。数值越小，排列越靠前，默认为 0 。 11. 单独对齐通过 align-self 属性，可以单独调整某个伸缩项目的对齐方式 默认值为 auto ，表示继承父元素的 align-items 属性。","tags":["CSS","前端","CSS3"],"categories":["CSS"]},{"title":"多列布局","path":"/2024/01/16/6.多列布局/","content":"作用：专门用于实现类似于报纸的布局。 常用属性如下： column-count ：指定列数，值是数字。 column-width ：指定列宽，值是长度。 columns ：同时指定列宽和列数，复合属性；值没有数量和顺序要求。 column-gap ：设置列边距，值是长度。 column-rule-style ：设置列与列之间边框的风格，值与 border-style 一致。 column-rule-width ：设置列与列之间边框的宽度，值是长度。 column-rule-color ：设置列与列之间边框的颜色。 coumn-rule ：设置列边框，复合属性。 column-span 指定是否跨列；值: none 、 all 。","tags":["CSS","前端","CSS3"],"categories":["CSS"]},{"title":"动画","path":"/2024/01/16/5.动画/","content":"5.1 基本使用第一步：定义关键帧（定义动画） 简单方式定义： 12345678910/*写法一*/@keyframes 动画名 &#123;from &#123;/*property1:value1*//*property2:value2*/&#125;to &#123;/*property1:value1*/&#125;&#125; 完整方式定义： 1234567891011121314151617181920@keyframes 动画名 &#123;0% &#123;/*property1:value1*/&#125;20% &#123;/*property1:value1*/&#125;40% &#123;/*property1:value1*/&#125;60% &#123;/*property1:value1*/&#125;80% &#123;/*property1:value1*/&#125;100% &#123;/*property1:value1*/&#125;&#125; 第二步：给元素应用动画，用到的属性如下： animation-name ：给元素指定具体的动画（具体的关键帧） animation-duration ：设置动画所需时间 animation-delay ：设置动画延迟 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465&lt;!DOCTYPE html&gt;&lt;html lang=&quot;zh-CN&quot;&gt;&lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;title&gt;01_基本使用&lt;/title&gt; &lt;style&gt; .outer &#123; width: 1000px; height: 100px; border: 1px solid black; &#125; /* 定义一个动画（定义一组关键帧）—— 第一种方式 */ @keyframes wangyoudong &#123; /* 第一帧 */ from &#123; &#125; /* 最后一帧 */ to &#123; transform: translate(900px); background-color: red; &#125; &#125; /* 定义一个动画（定义一组关键帧）—— 第二种方式 */ @keyframes wangyoudong2 &#123; /* 第一帧 */ 0% &#123; &#125; /* 29% &#123; background-color: red; &#125; */ /* 48% &#123; background-color: orange; &#125; */ /* 88% &#123; background-color: yellow; &#125; */ /* 最后一帧 */ 100% &#123; transform: translate(900px) rotate(360deg); background-color: purple; border-radius: 50%; &#125; &#125; .inner &#123; width: 100px; height: 100px; background-color: deepskyblue; /* 应用动画到元素 */ animation-name: wangyoudong2; /* 动画持续的时间 */ animation-duration: 3s; /* 动画延迟时间 */ animation-delay: 0.2s; &#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;div class=&quot;outer&quot;&gt; &lt;div class=&quot;inner&quot;&gt;&lt;/div&gt; &lt;/div&gt;&lt;/body&gt;&lt;/html&gt; 5.2 动画的其他属性 animation-timing-function ，设置动画的类型，常用值如下： ease ： 平滑动画 —— 默认值 linear ： 线性过渡 ease-in ： 慢 → 快 ease-out ： 快 → 慢 ease-in-out ： 慢 → 快 → 慢 step-start ： 等同于 steps(1, start) step-end ： 等同于 steps(1, end) steps( integer,?) ： 接受两个参数的步进函数。第一个参数必须为正整数，指定函数的步数。第二个参数取值可以是 start 或 end ，指定每一步的值发生变化的时间点。第二个参数默认值为 end 。 cubic-bezie ( number, number, number, number)： 特定的贝塞尔曲线类型。 animation-iteration-count ，指定动画的播放次数，常用值如下： number ：动画循环次数 infinite ： 无限循环 animation-direction ，指定动画方向，常用值如下： normal ： 正常方向 (默认) reverse ： 反方向运行 alternate ： 动画先正常运行再反方向运行，并持续交替运行 alternate-reverse ： 动画先反运行再正方向运行，并持续交替运行 animation-fill-mode ，设置动画之外的状态 forwards ： 设置对象状态为动画结束时的状态 backwards ： 设置对象状态为动画开始时的状态 animation-play-state ，设置动画的播放状态，常用值如下： running ： 运动 (默认) paused ： 暂停 5.3动画复合属性只设置一个时间表示 duration ，设置两个时间分别是： duration 和 delay ，其他属性没有数量和顺序要求。 备注： animation-play-state 一般单独使用。 123.inner &#123;animation: atguigu 3s 0.5s linear 2 alternate-reverse forwards;&#125;","tags":["CSS","前端","CSS3"],"categories":["CSS"]},{"title":"过渡","path":"/2024/01/16/4.过渡/","content":"4.1. transition-property作用：定义哪个属性需要过渡，只有在该属性中定义的属性（比如宽、高、颜色等）才会以有过渡 效果。 常用值： none ：不过渡任何属性。 all ：过渡所有能过渡的属性。 具体某个属性名 ，例如： width 、 heigth ，若有多个以逗号分隔。 不是所有的属性都能过渡，值为数字，或者值能转为数字的属性，都支持过渡，否则不支持过渡。 常见的支持过渡的属性有：颜色、长度值、百分比、 z-index 、 opacity 、 2D 变换属性、 3D 变换属性、阴影。 4.2. transition-duration作用：设置过渡的持续时间，即：一个状态过渡到另外一个状态耗时多久。 常用值： 0 ：没有任何过渡时间 —— 默认值。 s 或 ms ：秒或毫秒。 列表 ： 如果想让所有属性都持续一个时间，那就写一个值。 如果想让每个属性持续不同的时间那就写一个时间的列表。 4.3. transition-delay作用：指定开始过渡的延迟时间，单位： s 或 ms 4.4. transition-timing-function作用：设置过渡的类型 常用值： ease ： 平滑过渡 —— 默认值 linear ： 线性过渡 ease-in ： 慢 → 快 ease-out ： 快 → 慢 ease-in-out ： 慢 → 快 → 慢 step-start ： 等同于 steps(1, start) step-end ： 等同于 steps(1, end) steps( integer,?) ： 接受两个参数的步进函数。第一个参数必须为正整数，指定函数的步数。第二个参数取值可以是 start 或 end ，指定每一步的值发生变化的时间点。第二个参数默认值为 end 。 cubic-bezie ( number, number, number, number)： 特定的贝塞尔曲线类型。 在线制作贝赛尔曲线：https://cubic-bezier.com 4.5. transition 复合属性如果设置了一个时间，表示 duration ；如果设置了两个时间，第一是 duration ，第二个是delay ；其他值没有顺序要求。 1transition:1s 1s linear all; 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849&lt;!DOCTYPE html&gt;&lt;html lang=&quot;zh-CN&quot;&gt;&lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;title&gt;04_过渡案例&lt;/title&gt; &lt;style&gt; .outer &#123; width: 400px; height: 224px; position: relative; overflow: hidden; &#125; .mask &#123; width: 400px; height: 224px; background-color: black; color: white; position: absolute; top: 0; left: 0; text-align: center; line-height: 224px; font-size: 100px; opacity: 0; transition: 1s linear; cursor: pointer; &#125; img &#123; transition: 0.5s linear; &#125; .outer:hover .mask &#123; opacity: 0.5; &#125; .outer:hover img &#123; transform: scale(1.6) rotate(20deg); &#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;div class=&quot;outer&quot;&gt; &lt;img src=&quot;../images/shanghai.jpg&quot; alt=&quot;&quot;&gt; &lt;div class=&quot;mask&quot;&gt;上海&lt;/div&gt; &lt;/div&gt; &lt;div class=&quot;outer&quot;&gt; &lt;img src=&quot;../images/shanghai.jpg&quot; alt=&quot;&quot;&gt; &lt;div class=&quot;mask&quot;&gt;上海&lt;/div&gt; &lt;/div&gt;&lt;/body&gt;&lt;/html&gt;","tags":["CSS","前端","CSS3"],"categories":["CSS"]},{"title":"变换","path":"/2024/01/16/3.变换/","content":"3.1 2D变换3.1.1 2D位移2D 位移可以改变元素的位置，具体使用方式如下： 先给元素添加 转换属性 transform 编写transform的具体值 注意点： 位移与相对定位很相似，都不脱离文档流，不会影响到其它元素。 与相对定位的区别：相对定位的百分比值，参考的是其父元素；定位的百分比值，参考的是其自身。 浏览器针对位移有优化，与定位相比，浏览器处理位移的效率更高。 transform 可以链式编写，如：transform: translateX(30px) translateY(40px); 位移对行内元素无效。 位移配合定位，可实现元素水平垂直居中 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849&lt;!DOCTYPE html&gt;&lt;html lang=&quot;zh-CN&quot;&gt;&lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;title&gt;01_位移&lt;/title&gt; &lt;style&gt; .outer &#123; width: 200px; height: 200px; border: 2px solid black; margin: 0 auto; margin-top: 100px; position: relative; &#125; .inner &#123; width: 200px; height: 200px; background-color: deepskyblue; /* 水平位移 */ /* transform: translateX(50px); */ /* 垂直位移 */ /* transform: translateY(50px); */ /* 水平+垂直位移 */ /* transform: translate(50px,50px); */ &#125; .inner2 &#123; width: 60px; height: 60px; background-color: orange; position: absolute; top: 50%; left: 50%; transform: translate(-50%,-50%); &#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;div class=&quot;outer&quot;&gt; &lt;div class=&quot;inner&quot;&gt;你好啊&lt;/div&gt; &lt;/div&gt; &lt;div class=&quot;outer&quot;&gt; &lt;div class=&quot;inner2&quot;&gt;你好啊&lt;/div&gt; &lt;/div&gt;&lt;/body&gt;&lt;/html&gt; 3.1.2 2D缩放2D 缩放是指：让元素放大或缩小，具体使用方式如下： 先给元素添加 转换属性 transform 编写transform的具体值 注：借助缩放，可实现小于 12px 的文字。 3.1.3 2D旋转2D 旋转是指：让元素在二维平面内，顺时针旋转或逆时针旋转，具体使用方式如下： 先给元素添加 转换属性 transform 编写transform的具体值 注意： rotateZ(20deg) 相当于 rotate(20deg) ， 在平面上实现旋转应用rotateZ 3.1.4 2D扭曲2D 扭曲是指：让元素在二维平面内被“拉扯”，进而“走形”，实际开发几乎不用，了解即可，具体使用方式如下： 先给元素添加 转换属性 transform 编写transform的具体值 3.1.5 多重变换多个变换，可以同时使用一个 transform 来编写。 transform: translate(-50%, -50%) rotate(45deg); 一般都要把旋转放在最后来写，因为旋转后轴的方向会发生变化。 3.1.5 变换原点 元素变换时，默认的原点是元素的中心，使用 transform-origin 可以设置变换的原点。 修改变换原点对位移没有影响， 对旋转和缩放会产生影响。 如果提供两个值，第一个用于横坐标，第二个用于纵坐标。 如果只提供一个，若是像素值，表示横坐标，纵坐标取 50% ；若是关键词，则另一个坐标取 50% 注： transform-origin: 50% 50% ， 变换原点在元素的中心位置，百分比是相对于自身。—— 默认值 transform-origin: left top ，变换原点在元素的左上角 。 transform-origin: 50px 50px ， 变换原点距离元素左上角 50px 50px 的位置。 transform-origin: 0 ，只写一个值的时候，第二个值默认为 50% 。 3.2 3D变换3.2.1 开启3D空间重要原则：元素进行 3D 变换的首要操作：父元素必须开启 3D 空间！ 使用 transform-style 开启 3D 空间，可选值如下： flat ： 让子元素位于此元素的二维平面内（ 2D 空间）—— 默认值 preserve-3d ： 让子元素位于此元素的三维空间内（ 3D 空间） 3.2.2 设置景深何为景深？—— 指定观察者与 z&#x3D;0 平面的距离，能让发生 3D 变换的元素，产生透视效果，看来更加立体。 使用 perspective 设置景深，可选值如下： none ： 不指定透视 ——（默认值） 长度值 ： 指定观察者距离 z&#x3D;0 平面的距离，不允许负值。 注意： perspective 设置给发生 3D 变换元素的父元素！ 3.2.3 透视点位置实质上是camera位置。 所谓透视点位置，就是观察者位置；默认的透视点在元素的中心。 使用 perspective-origin 设置观察者位置（透视点的位置），例如： 注意：通常情况下，我们不需要调整透视点位置。 3.2.4 3D 位移3D 位移是在 2D 位移的基础上，可以让元素沿 z 轴位移，具体使用方式如下： 先给元素添加 转换属性 transform 编写 transform 的具体值， 3D 相关可选值如下： 3.2.5 3D 旋转3D 旋转是在 2D 旋转的基础上，可以让元素沿 x 轴和 y 轴旋转，具体使用方式如下： 先给元素添加 转换属性 transform 编写 transform 的具体值， 3D 相关可选值如下： 3.2.6 3D缩放3D 缩放是在 2D 缩放的基础上，可以让元素沿 z 轴缩放，但html元素没有厚度，所以会在景深上做调整，具体使用方式如下： 先给元素添加 转换属性 transform 编写 transform 的具体值， 3D 相关可选值如下： 3.2.7 多重变换多个变换，可以同时使用一个 transform 来编写。 transform: translateZ(100px) scaleZ(3) rotateY(40deg); 注意点：多重变换时，建议最后旋转。 3.2.8 背部可见性使用 backface-visibility 指定元素背面，在面向用户时是否可见，常用值如下： visible ： 指定元素背面可见，允许显示正面的镜像。—— 默认值 hidden ： 指定元素背面不可见 注意： backface-visibility 需要加在发生 3D 变换元素的自身上。","tags":["CSS","前端","CSS3"],"categories":["CSS"]},{"title":"CSS3新增内容","path":"/2024/01/16/新增内容/","content":"2.1 新增长度单位 rem 根元素字体大小的倍数，只与根元素字体大小有关。 vw 视口宽度的百分之多少 10vw 就是视口宽度的 10% 。 vh 视口高度的百分之多少 10vh 就是视口高度的 10% 。 vmax 视口宽高中大的那个的百分之多少。（了解即可） vmin 视口宽高中小的那个的百分之多少。（了解即可） 2.2 新增选择器CSS3 新增的选择器有：动态伪类、目标伪类、语言伪类、 UI 伪类、结构伪类、否定伪类、伪元素 2.3 新增盒模型相关属性2.3.1 BOX-SIZING怪异盒模型 2.3.2 resize调整盒子大小使用时要加上overflow，值任意。 2.4.2 box-shadow盒子阴影使用 box-shadow 属性为盒子添加阴影。 语法： 1box-shadow: h-shadow v-shadow blur spread color inset; 2.4.3 opacityopacity 属性能为整个元素添加透明效果， 值是 0 到 1 之间的小数， 0 是完全透明， 1 表示完 全不透明。 opacity 与 rgba 的区别在于 opacity 是一个属性，设置的是整个元素（包括元素里的内容）的不透明度。 rgba 是颜色的设置方式，用于设置颜色，它的透明度，仅仅是调整颜色的透明度 3.新增背景属性3.1 background-origin作用：设置背景图的原点。 语法 padding-box ：从 padding 区域开始显示背景图像。—— 默认值 border-box ： 从 border 区域开始显示背景图像。 content-box ： 从 content 区域开始显示背景图像。 3.2 background-clip作用：设置背景图的向外裁剪的区域。 语法 border-box ： 从 border 区域开始向外裁剪背景。 —— 默认值 padding-box ： 从 padding 区域开始向外裁剪背景。 content-box ： 从 content 区域开始向外裁剪背景。 text ：背景图只呈现在文字上。 注意：若值为 text ，那么 backgroun-clip 要加上 -webkit- 前缀。 3.3 background-size作用：设置背景图的尺寸。 语法： 用长度值指定背景图片大小，不允许负值。 用百分比指定背景图片大小，不允许负值。 auto ： 背景图片的真实大小。 —— 默认值 contain ： 将背景图片等比缩放，使背景图片的宽或高，与容器的宽或高相等，再将完整 背景图片包含在容器内，但要注意：可能会造成容器里部分区域没有背景图片。 cover ：将背景图片等比缩放，直到完全覆盖容器，图片会尽可能全的显示在元素上，但要 注意：背景图片有可能显示不完整。—— 相对比较好的选择 3.4. backgorund 复合属性语法： 注意： origin 和 clip 的值如果一样，如果只写一个值，则 origin 和 clip 都设置；如 果设置了两个值，前面的是 origin ，后面的 clip 。 size 的值必须写在 position 值的后面，并且用 &#x2F; 分开。 3.5 多背景图CSS3 允许元素设置多个背景图片 12345/* 添加多个背景图 */background: url(../images/bg-lt.png) no-repeat,url(../images/bg-rt.png) no-repeat right top,url(../images/bg-lb.png) no-repeat left bottom,url(../images/bg-rb.png) no-repeat right bottom; 4. 新增边框属性4.1 边框圆角在 CSS3 中，使用 border-radius 属性可以将盒子变为圆角。 border-radius:10px; border-raidus: 左上角x 右上角x 右下角x 左下角x &#x2F; 左上y 右上y 右下y 左下y 4.2 边框外轮廓outline-width ：外轮廓的宽度。 outline-color ：外轮廓的颜色。 outline-style ：外轮廓的风格。 none ： 无轮廓 dotted ： 点状轮廓 dashed ： 虚线轮廓 solid ： 实线轮廓 double ： 双线轮廓 outline-offset 设置外轮廓与边框的距离，正负值都可以设置。 注意： outline-offset 不是 outline 的子属性，是一个独立的属性。 outline 复合属性 1outline:50px solid blue; 5.新增文本属性5.1文本阴影语法： 默认值： text-shadow:none 表示没有阴影。 5.2 文本换行在 CSS3 中，我们可以使用 white-space 属性设置文本换行方式。 5.3 文本溢出在 CSS3 中，我们可以使用 text-overflow 属性设置文本内容溢出时的呈现模式。 注意：要使得 text-overflow 属性生效，块容器必须显式定义 overflow 为非 visible 值， white-space 为 nowrap 值。 5.4 文本修饰CSS3 升级了 text-decoration 属性，让其变成了复合属性。 子属性及其含义： text-decoration-line 设置文本装饰线的位置 none ： 指定文字无装饰 （默认值） underline ： 指定文字的装饰是下划线 overline ： 指定文字的装饰是上划线 line-through ： 指定文字的装饰是贯穿线 text-decoration-style 文本装饰线条的形状 solid ： 实线 （默认） double ： 双线 dotted ： 点状线条 dashed ： 虚线 wavy ： 波浪线 text-decoration-color 文本装饰线条的颜色 5.5 文本描边注意：文字描边功能仅 webkit 内核浏览器支持。 -webkit-text-stroke-width ：设置文字描边的宽度，写长度值。 -webkit-text-stroke-color ：设置文字描边的颜色，写颜色值。 -webkit-text-stroke ：复合属性，设置文字描边宽度和颜色。 6.新增渐变6.1 线性渐变多个颜色之间的渐变， 默认从上到下渐变。 使用关键词设置线性渐变的方向。 使用角度设置线性渐变的方向。 调整开始渐变的位置 12345background-image: linear-gradient(to top,red,yellow,green);background-image: linear-gradient(to right top,red,yellow,green);background-image: linear-gradient(30deg,red,yellow,green);background-image: linear-gradient(red 50px,yellow 100px ,green 150px); 6.2 径向渐变多个颜色之间的渐变， 默认从圆心四散。（注意：不一定是正圆，要看容器本身宽高比） 使用关键词调整渐变圆的圆心位置 使用像素值调整渐变圆的圆心位置。 调整渐变形状为正圆 调整形状的半径 。 调整开始渐变的位置。 1234567background-image: radial-gradient(at right top,red,yellow,green);/*使用关键词调整渐变圆的圆心位置*/background-image: radial-gradient(at 100px 50px,red,yellow,green); /*使用像素值调整渐变圆的圆心位置*/background-image: radial-gradient(circle,red,yellow,green);/*调整渐变形状为正圆*/background-image: radial-gradient(100px,red,yellow,green);/*调整形状的半径*/background-image: radial-gradient(50px 100px,red,yellow,green);background-image: radial-gradient(red 50px,yellow 100px,green 150px)；/*调整开始渐变的位置*/ 6.3 重复渐变无论线性渐变，还是径向渐变，在没有发生渐变的位置，继续进行渐变，就为重复渐变。 使用 repeating-linear-gradient 进行重复线性渐变，具体参数同 linear-gradient 。 使用 repeating-radial-gradient 进行重复径向渐变，具体参数同 radial-gradient 。 7.web字体7.1基本用法12345678910111213141516@font-face &#123; font-family: &quot;atguigu&quot;; font-display: swap; src: url(&#x27;webfont.eot&#x27;); /* IE9 */ src: url(&#x27;webfont.eot?#iefix&#x27;) format(&#x27;embedded-opentype&#x27;), /* IE6-IE8 */ url(&#x27;webfont.woff2&#x27;) format(&#x27;woff2&#x27;), url(&#x27;webfont.woff&#x27;) format(&#x27;woff&#x27;), /* chrome、firefox */ url(&#x27;webfont.ttf&#x27;) format(&#x27;truetype&#x27;), /* chrome、firefox、opera、Safari, Android*/ url(&#x27;webfont.svg#webfont&#x27;) format(&#x27;svg&#x27;); /* iOS 4.1- */&#125;@font-face &#123; font-family: &quot;情书字体&quot;; src: url(&#x27;./方正手迹.ttf&#x27;);&#125; 7.2 字体图标相比图片更加清晰。 灵活性高，更方便改变大小、颜色、风格等。 兼容性好， IE 也能支持。","tags":["CSS","前端","CSS3"],"categories":["CSS"]},{"title":"CSS3概述","path":"/2024/01/16/1.简介/","content":"1.1 CSS3 的新特性新增了更加实用的选择器，例如：动态伪类选择器、目标伪类选择器、伪元素选择器等等。 新增了更好的视觉效果，例如：圆角、阴影、渐变等。 新增了丰富的背景效果，例如：支持多个背景图片，同时新增了若干个背景相关的属性。 新增了全新的布局方案 —— 弹性盒子。 新增了 Web 字体，可以显示用户电脑上没有安装的字体。 增强了颜色，例如： HSL 、 HSLA 、 RGBA 几种新的颜色模式，新增 opacity 属性来控制 透明度。 增加了 2D 和 3D 变换，例如：旋转、扭曲、缩放、位移等。 增加动画与过渡效果，让效果的变换更具流线性、平滑性。 1.2 CSS3的私有前缀1.2.1 什么是私有前缀如下代码中的 -webkit- 就是私有前缀 12345div &#123; width:400px; height:400px; -webkit-border-radius: 20px;&#125; 1.2.2 为什么要有私有前缀W3C 标准所提出的某个 CSS 特性，在被浏览器正式支持之前，浏览器厂商会根据浏览器的内核， 使用私有前缀来测试该 CSS 特性，在浏览器正式支持该 CSS 特性后，就不需要私有前缀了。 举个例子： 12345-webkit-border-radius: 20px;-moz-border-radius: 20px;-ms-border-radius: 20px;-o-border-radius: 20px;border-radius: 20px; 查询 CSS3 兼容性的网站：https://caniuse.com/ 1.2.3 常见浏览器私有前缀Chrome 浏览器： -webkit- Safari 浏览器： -webkit- Firefox 浏览器： -moz- Edge 浏览器： -webkit- 旧 Opera 浏览器： -o- 旧 IE 浏览器： -ms- 注意： 我们在编码时，不用过于关注浏览器私有前缀，不用绞尽脑汁的去记忆，也不用每个都去查询，因 为常用的 CSS3 新特性，主流浏览器都是支持的，即便是为了老浏览器而加前缀，我们也可以借助 现代的构建工具，去帮我们添加私有前缀。","tags":["CSS","前端","CSS3"],"categories":["CSS"]},{"title":"浮动","path":"/2024/01/16/浮动/","content":"1.浮动在最初，浮动是用来实现文字环绕图片效果的，现在浮动是主流的页面布局方式之一。 浮动后的特点： 🤢脱离文档流。 😊不管浮动前是什么元素，浮动后：默认宽与高都是被内容撑开（尽可能小），而且可以设置宽高。 😊不会独占一行，可以与其他元素共用一行。 😊不会 margin 合并，也不会 margin 塌陷，能够完美的设置四个方向的 margin和padding。 😊不会像行内块一样被当做文本处理（没有行内块的空白问题）。 2.浮动产生的影响2.1 元素浮动后会有哪些影响对兄弟元素的影响：如果父元素没有高度，会产生高度塌陷， 后面的兄弟元素，会占据浮动元素之前的位置，在浮动元素的下面；对前面的兄弟无影响。 对父元素的影响： 不能撑起父元素的高度，导致 父元素高度塌陷；但父元素的宽度依然束缚浮动的元素。 2.2 解决浮动产生的影响（清除浮动）解决方案： 方案一： 给父元素指定高度。 方案二： 给父元素也设置浮动，带来其他影响。 方案三： 给父元素设置 overflow:hidden 。 前三种可以解决父元素高度塌陷的问题，但不能解决兄弟元素被覆盖的问题。 4.方案四： 在所有浮动元素的最后面，添加一个块级元素，并给该块级元素设置 clear:both 。 意思是清除前面所有兄弟的浮动产生的影响，前提是这个元素不浮动并且不是行内元素。 5.方案五： 给浮动元素的父元素，设置伪元素，通过伪元素清除浮动，原理与方案四相同。&#x3D;&#x3D;&#x3D;&gt; 推荐使用 但是使用时前面的兄弟元素必须全为浮动元素。 12345.parent::after &#123; content: &quot;&quot;; display: block; clear:both;&#125; 布局中的一个原则：设置浮动的时候，兄弟元素要么全都浮动，要么全都不浮动。","tags":["CSS","前端"],"categories":["CSS"]},{"title":"定位","path":"/2024/01/16/定位/","content":"1.相对定位1、 如何设置相对定位？给元素设置 position:relative 即可实现相对定位。 可以使用 left 、 right 、 top 、 bottom 四个属性调整位置。 2、 相对定位的参考点在哪里？相对自己原来的位置 3、相对定位的特点： 不会脱离文档流，元素位置的变化，只是视觉效果上的变化，不会对其他元素产生任何影响。 定位元素的显示层级比普通元素高，无论什么定位，显示层级都是一样的。 默认规则是： 定位的元素会盖在普通元素之上。都发生定位的两个元素，后写的元素会盖在先写的元素之上。 left 不能和 right 一起设置， top 和 bottom 不能一起设置。 相对定位的元素，也能继续浮动，但不推荐这样做。 相对行为的元素，也能通过 margin 调整位置，但不推荐这样做。 注意：绝大多数情况下，相对定位，会与绝对定位配合使用。 4.使用场景 1.对位置微调 2.配合绝对定位适用 2.绝对定位1、 如何设置绝对定位？给元素设置 position: absolute 即可实现绝对定位。 可以使用 left 、 right 、 top 、 bottom 四个属性调整位置。 2、绝对定位的参考点在哪里？参考它的包含块。 什么是包含块？ 对于没有脱离文档流的元素：包含块就是父元素； 对于脱离文档流的元素：包含块是第一个拥有定位属性的祖先元素（如果所有祖先都没定位，那包含块就是整个页面）。 3、 绝对定位元素的特点： 脱离文档流，会对后面的兄弟元素、父元素有影响。 left 不能和 right 一起设置， top 和 bottom 不能一起设置。 绝对定位、浮动不能同时设置，如果同时设置，浮动失效，以定位为主。 绝对定位的元素，也能通过 margin 调整位置，但不推荐这样做。 无论是什么元素（行内、行内块、块级）设置为绝对定位之后，都变成了定位元素。 何为定位元素？ —— 默认宽、高都被内容所撑开，且能自由设置宽高。 3.固定定位1、 如何设置为固定定位？给元素设置 position: fixed 即可实现固定定位。 可以使用 left 、 right 、 top 、 bottom 四个属性调整位置。 2、定定位的参考点在哪里？参考它的视口 什么是视口？—— 对于 PC 浏览器来说，视口就是我们看网页的那扇“窗户”。 3、 固定定位元素的特点 脱离文档流，会对后面的兄弟元素、父元素有影响。 left 不能和 right 一起设置， top 和 bottom 不能一起设置。 固定定位和浮动不能同时设置，如果同时设置，浮动失效，以固定定位为主。 固定定位的元素，也能通过 margin 调整位置，但不推荐这样做。 无论是什么元素（行内、行内块、块级）设置为固定定位之后，都变成了定位元素 4.粘性定位1、如何设置为粘性定位？给元素设置 position:sticky 即可实现粘性定位。 可以使用 left 、 right 、 top 、 bottom 四个属性调整位置，不过最常用的是 top 值。 2、粘性定位的参考点在哪里？离它最近的一个拥有“滚动机制”的祖先元素，即便这个祖先不是最近的真实可滚动祖先。 3、粘性定位元素的特点不会脱离文档流，它是一种专门用于窗口滚动时的新的定位方式。 最常用的值是 top 值。 粘性定位和浮动可以同时设置，但不推荐这样做。 粘性定位的元素，也能通过 margin 调整位置，但不推荐这样做。 粘性定位和相对定位的特点基本一致，不同的是：粘性定位可以在元素到达某个位置时将其固定。 5.定位层级 定位元素的显示层级比普通元素高，无论什么定位，显示层级都是一样的。 如果位置发生重叠，默认情况是：后面的元素，会显示在前面元素之上。 可以通过 css 属性 z-index 调整元素的显示层级。 z-index 的属性值是数字，没有单位，值越大显示层级越高。 只有定位的元素设置 z-index 才有效。 如果 z-index 值大的元素，依然没有覆盖掉 z-index 值小的元素，那么请检查其包含块的层级。 6.定位的特殊应用定位可以越过父元素的padding注意： 发生固定定位、绝对定位后，元素都变成了定位元素，默认宽高被内容撑开，且依然可以设置宽高。 发生相对定位后，元素依然是之前的显示模式。 以下所说的特殊应用，只针对 绝对定位 和 固定定位 的元素，不包括相对定位的元素 1、让定位元素的宽充满包含块定位元素可以没有宽高。 块宽想与包含块一致，可以给定位元素同时设置 left 和 right 为 0 。 高度想与包含块一致， top 和 bottom 设置为 0 。 2、让定位元素在包含块中居中这种情况需要子元素有宽和高。 12345left:0;right:0;top:0;bottom:0;margin:auto; 或者 1234left: 50%;top: 50%;margin-left: 负的宽度一半;margin-top: 负的高度一半;","tags":["CSS","前端"],"categories":["CSS"]},{"title":"重置默认样式","path":"/2024/01/16/布局/","content":"重置默认样式 很多元素都有默认样式，比如： p 元素有默认的上下 margin 。 h1~h6 标题也有上下 margin ，且字体加粗。 body 元素有默认的 8px 外边距。 超链接有默认的文字颜色和下划线。 ul 元素有默认的左 pading 。 方案一：使用全局选择器此种方法，在简单案例中可以用一下，但实际开发中不会使用，因为 * 选择的是所有元素，而并 不是所有的元素都有默认样式；而且我们重置时，有时候是需要做特定处理的，比如：想让 a 元 素的文字是灰色，其他元素文字是蓝色。 方案二：reset.css选择到具有默认样式的元素，清空其默认的样式。 经过 reset 后的网页，好似“一张白纸”，开发人员可根据设计稿，精细的去添加具体的样式。 { margin: 0; padding: 0; …… } 方案三：Normalize.cssNormalize.css 是一种最新方案，它在清除默认样式的基础上，保留了一些有价值的默认样式。 官网地址：http://necolas.github.io/normalize.css/ 相对于 reset.css ， Normalize.css 有如下优点： 保护了有价值的默认样式，而不是完全去掉它们。 为大部分HTML元素提供一般化的样式。 新增对 HTML5 元素的设置。 对并集选择器的使用比较谨慎，有效避免调试工具杂乱。 备注： Normalize.css 的重置，和 reset.css 相比，更加的温和，开发时可根据实际情况进行 选择。","tags":["CSS","前端"],"categories":["CSS"]},{"title":"盒子模型","path":"/2024/01/16/盒子模型/","content":"1.长度单位 px ：像素。 em ：相对元素 font-size 的倍数。如果子元素没有，就往父元素上找。 rem ：相对根字体大小，html标签就是根。 % ：相对父元素计算。 2.元素的显示模式2.1块元素（block）&lt;div&gt; 又称：块级元素 特点： 在页面中独占一行，不会与任何元素共用一行，是从上到下排列的。 默认宽度：撑满父元素。 默认高度：由内容撑开。 可以通过 CSS 设置宽高。 2.2行内元素（inline）&lt;span&gt; 又称：内联元素 特点: 1.在页面中不独占一行，一行中不能容纳下的行内元素，会在下一行继续从左到右排列 2.默认宽度：由内容撑开。 &#x2F;* 自定义鼠标光标 *&#x2F; cursor: url(“.&#x2F;arrow.png”),pointer; 3. 默认高度：由内容撑开。 4.无法通过 CSS 设置宽高。 2.3行内块元素（inline-block）&lt;img&gt; 又称：内联块元素 特点： 1.在页面中不独占一行，一行中不能容纳下的行内元素，会在下一行继续从左到右排列。 2.默认宽度：由内容撑开。 3.默认高度：由内容撑开。 4.可以通过 CSS 设置宽高。 注意：元素早期只分为：行内元素、块级元素，区分条件也只有一条：”是否独占一行”，如果按照这种分类方式，行内块元素应该算作行内元素。 3.总结块元素（block） 主体结构标签： &lt;html&gt; 、 &lt;body&gt; 排版标签： &lt;h1&gt; ~ &lt;h6&gt; 、 &lt;hr&gt; 、 &lt;p&gt; 、 &lt;pre&gt; 、 &lt;div&gt; 列表标签： &lt;ul&gt; 、 &lt;ol&gt; 、 &lt;li&gt; 、 &lt;dl&gt; 、 &lt;dt&gt; 、 &lt;dd&gt; 表格相关标签： &lt;table&gt; 、 &lt;tbody&gt; 、 &lt;thead&gt; 、 &lt;tfoot&gt; 、 &lt;tr&gt; 、 &lt;caption&gt; &#x20; 5.&lt;form&gt; 与 &lt;option&gt; 行内元素（inline） 文本标签： &lt;br&gt; 、 &lt;em&gt; 、 &lt;strong&gt; 、 &lt;sup&gt; 、 &lt;sub&gt; 、 &lt;del&gt; 、 &lt;ins&gt; &lt;a&gt; 与 &lt;label&gt; 行内块元素（inline-block） 图片： &lt;img&gt; 单元格： &lt;td&gt; 、 &lt;th&gt; 表单控件： &lt;input&gt; 、 &lt;textarea&gt; 、 &lt;select&gt; 、 &lt;button&gt; 框架标签： &lt;iframe&gt; 4.修改元素的显示模式通过 CSS 中的 display 属性可以修改元素的默认显示模式，常用值如下： none：元素会被隐藏。 block：元素将作为块级元素显示。 inline：元素将作为内联元素显示。 inline-block：元素将作为行内块元素显示 5.盒子模型组成 margin（外边距）： 盒子与外界的距离。 border（边框）： 盒子的边框。 padding（内边距）： 紧贴内容的补白区域。 content（内容）：元素中的文本或后代元素都是它的内容。 盒子的大小 &#x3D; content + 左右 padding + 左右 border 。 5.1 paddingpadding 复合属性的使用规则： padding: 10px; 四个方向内边距都是 10px 。 padding: 10px 20px; 上 10px ，左右 20px 。（上下、左右） padding: 10px 20px 30px; 上 10px ，左右 20px ，下 30px 。（上、左右、下） padding: 10px 20px 30px 40px; 上 10px ，右 20px ，下 30px ，左 40px 。（上、右、 下、左） 注意点： padding 的值不能为负数。 行内元素 的 左右内边距是没问题的，上下内边距不能完美的设置。 块级元素、行内块元素，四个方向内边距都可以完美设置。 5.2 margin注意事项 子元素的 margin ，是参考父元素的 content 计算的。（因为是父亲的 content 中承装着子元素） 上 margin 、左 margin ：影响自己的位置；下 margin 、右 margin ：影响后面兄弟元素的位置。 块级元素、行内块元素，均可以完美地设置四个方向的 margin ；但行内元素，左右margin 可以完美设置，上下 margin 设置无效。 margin 的值也可以是 auto ，如果给一个块级元素设置左右 margin 都为 auto ，该块级元素会在父元素中水平居中。 margin 的值可以是负值。 5.3 margin塌陷问题什么是 margin 塌陷？第一个子元素的上 margin 会作用在父元素上，最后一个子元素的下 margin 会作用在父元素上。如何解决 margin 塌陷？方案一： 给父元素设置不为 0 的 padding 。方案二： 给父元素设置宽度不为 0 的 border 。方案三：给父元素设置 css 样式 overflow:hidden 5.4 margin合并问题什么是 margin 合并？ 上面兄弟元素的下外边距和下面兄弟元素的上外边距会合并，取一个最大的值，而不是相加。 如何解决 margin 塌陷？ 无需解决，布局的时候上下的兄弟元素，只给一个设置上下外边距就可以了。 6.内容溢出 7.隐藏元素方式一：visibility 属性 visibility 属性默认值是 show ，如果设置为 hidden ，元素会隐藏。 元素看不见了，还占有原来的位置（元素的大小依然保持）。 方式二： display 属性 设置 display:none ，就可以让元素隐藏。 彻底地隐藏，不但看不见，也不占用任何位置，没有大小宽高。 8.样式的继承有些样式会继承，元素如果本身设置了某个样式，就使用本身设置的样式；但如果本身没有设置某个样式，会从父元素开始一级一级继承（优先继承离得近的祖先元素）。 会继承的 css 属性： 字体属性、文本属性、文字颜色等 不会继承的 css 属性： 边框、背景、内边距、外边距、宽高、溢出方式等 一个规律：能继承的属性，都是不影响布局的，简单说：都是和盒子模型没关系的。 9.默认样式元素一般都有默认的样式，例如： &lt;a&gt; 元素：下划线、字体颜色、鼠标小手。 &lt;h1&gt; ~ &lt;h6&gt; 元素： 文字加粗、文字大小、上下外边距。 &lt;p&gt; 元素：上下外边距 &lt;ul&gt; 、 ol 元素：左内边距 body 元素： 8px 外边距（4个方向） 优先级：元素的默认样式 &gt; 继承的样式，所以如果要重置元素的默认样式，选择器一定要直接选择器到该元素。 10.布局效果1.行内元素、行内块元素，可以被父元素当做文本处理 即：可以像处理文本对齐一样，去处理：行内、行内块在父元素中的对齐。 例如： text-align 、 line-height 、 text-indent 等。 2.如何让子元素，在父亲中 水平居中： 若子元素为块元素，给父元素加上： margin:0 auto; 。 若子元素为行内元素、行内块元素，给父元素加上： text-align:center 。 📌3.如何让子元素，在父亲中 垂直居中： 若子元素为块元素，给子元素加上： margin-top ，值为：(父元素 content －子元素盒子 总高) &#x2F; 2。 若子元素为行内元素、行内块元素： 让父元素的 height &#x3D; line-height ，每个子元素都加上： vertical-align:middle; 。 补充：若想绝对垂直居中，父元素 font-size 设置为 0 。 11.元素之间的空白问题产生的原因： 行内元素、行内块元素，彼此之间的换行会被浏览器解析为一个空白字符。 解决方案： 方案一： 去掉换行和空格（不推荐）。 方案二： 给父元素设置 font-size:0 ，再给需要显示文字的元素，单独设置字体大小（推 荐）。 12.行内块的幽灵空白问题产生原因： 行内块元素与文本的基线对齐，而文本的基线与文本最底端之间是有一定距离的。 解决方案： &#x20;方案一： 给行行内块设置 vertical ，值不为 baseline 即可，设置为 middel 、 bottom 、top 均可。 方案二： 若父元素中只有一张图片，没有文字，设置图片为 display:block 。 方案三： 给父元素设置 font-size: 0 。如果该行内块内部还有文本，则需单独设置 font-size 。","tags":["CSS","前端"],"categories":["CSS"]},{"title":"常用属性","path":"/2024/01/16/常用属性/","content":"1.字体font-size：字体的大小font-family：控制字体类型。可以设置多个字体，按照从左到右的顺序逐个查找，找到就用，没有找到就使用后面 的，且通常在最后写上 serif （衬线字体）或 sans-serif （非衬线字体）。 font-style：字体是否为斜体常用值： normal ：正常（默认值） italic ：斜体（使用字体自带的斜体效果） oblique ：斜体（强制倾斜产生的斜体效果） 实现斜体时，更推荐使用 italic 。 font-weight：控制字体的粗细。 lighter ：细 normal ： 正常 bold ：粗 bolder ：很粗 （多数字体不支持） 字体复合写法属性名： font ，可以把上述字体样式合并成一个属性。 作用：将上述所有字体相关的属性复合在一起编写。 编写规则： 字体大小、字体族必须都写上。 字体族必须是最后一位、字体大小必须是倒数第二位。 各个属性间用空格隔开。 实际开发中更推荐复合写法，但这也不是绝对的，比如只想设置字体大小，那就直接用 font- size 属性 2.文本color： 颜色名 rgb 或 rgba HEX 或 HEXA （十六进制） HSL 或 HSLA 开发中常用的是： rgb&#x2F;rgba 或 HEX&#x2F;HEXA （十六进制）。 间距：字母间距： letter-spacing 单词间距： word-spacing （通过空格识别词，每个中文算一个letter） 属性值为像素（ px ），正值让间距增大，负值让间距缩小。 text-decoration:控制文本的各种装饰线。可选值： none ： 无装饰线（常用） underline ：下划线（常用） overline ： 上划线 line-through ： 删除线 可搭配如下值使用： dotted ：虚线 wavy ：波浪线 也可以指定颜色 text-indent：文本缩进作用：控制文本首字母的缩进。 属性值： css 中的长度单位，例如： px text-align：控制文本的水平对齐方式。常用值： left ：左对齐（默认值） right ：右对齐 center ：居中对齐 line-height：制一行文字的高度。可选值： normal ：由浏览器根据文字大小决定的一个默认值。 像素( px )。 数字：参考自身 font-size 的倍数（很常用）。 百分比：参考自身 font-size 的百分比。 注 ： line-height 过小会怎样？—— 文字产生重叠，且最小值是 0 ，不能为负数。 line-height 是可以继承的，且为了能更好的呈现文字，最好写数值。 line-height 和 height 是什么关系？ 设置了 height ，那么高度就是 height 的值。 不设置 height 的时候，会根据 line-height 计算高度 文本对齐_垂直 顶部：无需任何属性，在垂直方向上，默认就是顶部对齐。 居中：对于单行文字，让 height &#x3D; line-height 即可。 问题：多行文字垂直居中怎么办？—— 后面我们用定位去做。 3底部：对于单行文字，目前一个临时的方式： 让 line-height &#x3D; ( height × 2 ) - font-size - x 。 备注： x 是根据字体族，动态决定的一个值。 问题：垂直方向上的底部对齐，更好的解决办法是什么？—— 后面我们用定位去做。 vertical-align :垂直对齐方式用于指定同一行元素之间，或 表格单元格内文字的垂直对齐方式。 常用值： baseline （默认值）：使元素的基线与父元素的基线对齐。 top ：使元素的顶部与其所在行的顶部对齐。 middle ：使元素的中部与父元素的基线加上父元素字母 x 的一半对齐。 bottom ：使元素的底部与其所在行的底部对齐。 特别注意： vertical-align 不能控制块元素，只能控制父级元素里的子元素 3.列表属性 4.表格属性4.1边框属性 注意： 以上 4 个边框相关的属性，其他元素也可以用，这是我们第一次遇见它们。 4.2表格属性 5.背景属性 6.鼠标属性","tags":["CSS","前端"],"categories":["CSS"]},{"title":"三大特性","path":"/2024/01/16/三大特性/","content":"1.层叠性概念：如果发生了样式冲突，那就会根据一定的规则（选择器优先级），进行样式的层叠（覆 盖）。 2.继承性概念：元素会自动拥有其父元素、或其祖先元素上所设置的某些样式。 规则：优先继承离得近的。 常见的可继承属性： 3.优先级!important &gt; 行内样式 &gt; ID选择器 &gt; 类选择器 &gt; 元素选择器 &gt; * &gt; 继承的样 式。 见选择器","tags":["CSS","前端"],"categories":["CSS"]},{"title":"选择器","path":"/2024/01/16/选择器/","content":"1.基本选择器1.1 通配选择器作用：可以选中所有的 HTML 元素。 语法： 123* &#123; color：orange&#125; 备注：清除样式时，会对我们有很大帮助 1.2元素选择器作用：为页面中某种元素统一设置样式。 语法： 1234h1 &#123; color: red; font-size: 40px;&#125; 1.3 类选择器作用：根据元素的 class 值，来选中某些元素。 123.button_choose&#123; color:red;&#125; 注： 一个元素的 class 属性，能写多个值，要用空格隔开，例如： 1&lt;h1 class=&quot;speak big&quot;&gt;你好&lt;/h1&gt; 1.4 ID选择器作用：根据元素的 id 值，来选中某个元素。 123#button_choose&#123; color:red;&#125; 注： 一个元素的 class 属性，能写多个值，要用空格隔开，例如： 1&lt;h1 class=&quot;speak big&quot;&gt;你好&lt;/h1&gt; 注： 1、id 属性值：尽量由字母、数字、下划线( _ )、短杠( - )组成，最好以字母开头、不要包含空 格、区分大小写。 2、一个元素只能拥有一个 id 属性，多个元素的 id 属性值不能相同。 3、一个元素可以同时拥有 id 和 class 属性。 2.复合选择器2.1交集选择器交集选择器中不可能出现两个元素选择器，因为一个元素，不可能即是 p 元素又是 span 元 素 用的最多的交集选择器是：元素选择器配合类名选择器，例如： p.beauty 。 12345678/* 选中：类名为beauty的p元素，为此种写法用的非常多！！！！ */p.beauty &#123; color: blue;&#125;/* 选中：类名包含rich和beauty的元素 */.rich.beauty &#123; color: green;&#125; 2.2 并集选择器12345678/* 选中id为peiqi，或类名为rich，或类名为beauty的元素 */#peiqi,.rich,.beauty &#123; font-size: 40px; background-color: skyblue; width: 200px;&#125; 2.3 后代选择器&#x20;&#x20;子、孙子、重孙子、重重孙子 …… 统称后代 12345678910111213141516/* 选中ul中的所有li */ul li &#123; color: red;&#125;/* 选中ul中所有li中的a */ul li a &#123; color: orange;&#125;/* 选中类名为subject元素中的所有li */.subject li &#123; color: blue;&#125;/* 选中类名为subject元素中的所有类名为front-end的li */.subject li.front-end &#123; color: blue;&#125; 2.4 子代选择器选择器之间，用 &gt; 隔开， &gt; 可以理解为：” xxx 的子代”，其实就是儿子的意思。 只选儿子 12345678/* div中的子代a元素 */div&gt;a &#123; color: red;&#125;/* 类名为persons的元素中的子代a元素 */.persons&gt;a&#123; color: red;&#125; 2.5 兄弟选择器2.5.1相邻兄弟选择器作用：选中指定元素后，符合条件的相邻兄弟元素。 所谓相邻，就是紧挨着他的下一个，简记：睡在我下铺的兄弟。 123456789101112131415161718&lt;html&gt; &lt;style&gt; /* 选中div后相邻的兄弟p元素 */ div+p &#123; color:red; &#125; &lt;/style&gt; &lt;body&gt; &lt;div&gt;test&lt;/div&gt; &lt;p&gt;1&lt;/p&gt; &lt;p&gt;2&lt;/p&gt; &lt;p&gt;3&lt;/p&gt; &lt;p&gt;4&lt;/p&gt; &lt;/body&gt;&lt;/html&gt; 使用场景： 想让23都变为红色 1234567891011121314&lt;html&gt; &lt;style&gt; li+li &#123; color:red; &#125; &lt;/style&gt; &lt;body&gt; &lt;ul&gt; &lt;li&gt;1&lt;/li&gt; &lt;li&gt;2&lt;/li&gt; &lt;li&gt;3&lt;/li&gt; &lt;/ul&gt; &lt;/body&gt;&lt;/html&gt; 2.5.2通用兄弟选择器作用：选中指定元素后，符合条件的所有兄弟元素。（简记：睡在我下铺的所有兄弟） 123456789101112131415&lt;html&gt; &lt;style&gt; /* 选中div后的所有的兄弟p元素 */ div~p &#123; color:red; &#125; &lt;/style&gt; &lt;body&gt; &lt;div&gt;test&lt;/div&gt; &lt;p&gt;1&lt;/p&gt; &lt;p&gt;2&lt;/p&gt; &lt;p&gt;3&lt;/p&gt; &lt;p&gt;4&lt;/p&gt; &lt;/body&gt;&lt;/html&gt; 注意：两种兄弟选择器，选择的是下面的兄弟。 2.6 属性选择器作用：选中属性值符合一定要求的元素。 语法： [属性名] 选中具有某个属性的元素。 [属性名&#x3D;”值”] 选中包含某个属性，且属性值等于指定值的元素。 [属性名^&#x3D;”值”] 选中包含某个属性，且属性值以指定的值开头的元素。 [属性名$&#x3D;”值”] 选中包含某个属性，且属性值以指定的值结尾的元素。 [属性名 *&#x3D;“值”] 选择包含某个属性，属性值包含指定值的元素 1234567891011/* 选中具有title属性的元素 */div[title]&#123;color:red;&#125;/* 选中title属性值为atguigu的元素 */div[title=&quot;atguigu&quot;]&#123;color:red;&#125;/* 选中title属性值以a开头的元素 */div[title^=&quot;a&quot;]&#123;color:red;&#125;/* 选中title属性值以u结尾的元素 */div[title$=&quot;u&quot;]&#123;color:red;&#125;/* 选中title属性值包含g的元素 */div[title*=&quot;g&quot;]&#123;color:red;&#125; 2.7 伪类选择器作用：选中特殊状态的元素。 2.7.1动态伪类1. :link 超链接未被访问的状态。 2. :visited 超链接访问过的状态。 3.:hover 鼠标悬停在元素上的状态。 4.:active 元素激活的状态。 激活：按下鼠标不松开。 注意点：遵循 LVHA 的顺序，即： link 、 visited 、 hover 、 active 。 5.:focus 获取焦点的元素。 表单类元素才能使用 :focus 伪类。 当用户点击元素、触摸元素、或通过键盘的 “ tab ” 键等方式，选择元素时，就是获得焦点。 2.7.2 结构伪类1.常用的 :first-child 所有兄弟元素中的第一个。 :last-child 所有兄弟元素中的最后一个。 :nth-child(n) 所有兄弟元素中的第 n 个。 :first-of-type 所有同类型兄弟元素中的第一个。 :last-of-type 所有同类型兄弟元素中的最后一个。 :nth-of-type(n) 所有同类型兄弟元素中的 第n个 。 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061&lt;!DOCTYPE html&gt;&lt;html lang=&quot;zh-CN&quot;&gt;&lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;title&gt;09_伪类选择器_结构伪类_1&lt;/title&gt; &lt;style&gt; /* 选中的是div的第一个儿子p元素（按照所有兄弟计算的） —— 看结构1 */ /* div&gt;p:first-child &#123; color: red; &#125; */ /* 选中的是div的第一个儿子p元素（按照所有兄弟计算的） —— 看结构2 选不到 因为span是第一个儿子*/ /* div&gt;p:first-child &#123; color: red; &#125; */ /* 选中的是div的后代p元素，且p的父亲是谁无所谓，但p必须是其父亲的第一个儿子（按照所有兄弟计算的） 所以测试三和测试二会变红—— 看结构3 */ /* div p:first-child &#123; color: red; &#125; */ /* 选中的是p元素，且p的父亲是谁无所谓，但p必须是其父亲的第一个儿子（按照所有兄弟计算的） —— 看结构3 测试一测试二测试三都变红 */ p:first-child &#123; color: red; &#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;!-- 结构1 --&gt; &lt;!-- &lt;div&gt; &lt;p&gt;张三：98分&lt;/p&gt; &lt;p&gt;李四：88分&lt;/p&gt; &lt;p&gt;王五：78分&lt;/p&gt; &lt;p&gt;赵六：68分&lt;/p&gt; &lt;/div&gt; --&gt; &lt;!-- 结构2 --&gt; &lt;!-- &lt;div&gt; &lt;span&gt;张三：98分&lt;/span&gt; &lt;p&gt;李四：88分&lt;/p&gt; &lt;p&gt;王五：78分&lt;/p&gt; &lt;p&gt;赵六：68分&lt;/p&gt; &lt;/div&gt; --&gt; &lt;!-- 结构3 --&gt; &lt;p&gt;测试1&lt;/p&gt; &lt;div&gt; &lt;p&gt;测试2&lt;/p&gt; &lt;marquee&gt; &lt;p&gt;测试3&lt;/p&gt; &lt;p&gt;张三：98分&lt;/p&gt; &lt;/marquee&gt; &lt;p&gt;李四：88分&lt;/p&gt; &lt;p&gt;王五：78分&lt;/p&gt; &lt;p&gt;赵六：68分&lt;/p&gt; &lt;/div&gt;&lt;/body&gt;&lt;/html&gt; 注：关于 n 的值： 0 或 不写 ：什么都选不中 —— 几乎不用。 n ：选中所有子元素 —— 几乎不用。 1~正无穷的整数 ：选中对应序号的子元素。 2n 或 even ：选中序号为偶数的子元素。 2n+1 或 odd ：选中序号为奇数的子元素。 -n+3 ：选中的是前 3 个。 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182838485868788899091&lt;!DOCTYPE html&gt;&lt;html lang=&quot;zh-CN&quot;&gt;&lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;title&gt;10_伪类选择器_结构伪类_2&lt;/title&gt; &lt;style&gt; /* 选中的是div的第一个儿子p元素（按照所有兄弟计算的）—— 结构1*/ /* div&gt;p:first-child &#123; color: red; &#125; */ /* 选中的是div的最后一个儿子p元素（按照所有兄弟计算的）—— 结构1*/ /* div&gt;p:last-child &#123; color: red; &#125; */ /* 选中的是div的第n个儿子p元素（按照所有兄弟计算的）—— 结构1 */ /* div&gt;p:nth-child(3) &#123; color: red; &#125; */ /* 选中的是div的偶数个儿子p元素（按照所有兄弟计算的）—— 结构2 */ /* 关于n的值 —— 结构2： 1. 0或不写：什么都选不中 —— 几乎不用。 2. n ：选中所有子元素 —— 几乎不用。 3. 1 ~ 正无穷的整数，选中对应序号的子元素。 4. 2n 或 even ：选中序号为偶数的子元素。 5. 2n+1 或 odd ：选中序号为奇数的子元素。 6. -n+3 : 选中前三个。 */ /* div&gt;p:nth-child(2n) &#123; color: red; &#125; */ /* 选中的是div的第一个儿子p元素（按照所有同类型兄弟计算的）—— 结构3 */ /* div&gt;p:first-of-type&#123; color: red; &#125; */ /* 选中的是div的最后一个儿子p元素（按照所有同类型兄弟计算的）—— 结构3 */ /* div&gt;p:last-of-type&#123; color: red; &#125; */ /* 选中的是div的第n个儿子p元素（按照所有同类型兄弟计算的）—— 结构3 */ /* div&gt;p:nth-of-type(5) &#123; color: red; &#125; */ &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;!-- 结构1 --&gt; &lt;!-- &lt;div&gt; &lt;p&gt;张三：98分&lt;/p&gt; &lt;p&gt;李四：88分&lt;/p&gt; &lt;p&gt;王五：78分&lt;/p&gt; &lt;p&gt;赵六：68分&lt;/p&gt; &lt;p&gt;孙七：58分&lt;/p&gt; &lt;p&gt;老八：48分&lt;/p&gt; &lt;/div&gt; --&gt; &lt;!-- 结构2 --&gt; &lt;!-- &lt;div&gt; &lt;p&gt;第1个&lt;/p&gt; &lt;p&gt;第2个&lt;/p&gt; &lt;p&gt;第3个&lt;/p&gt; &lt;p&gt;第4个&lt;/p&gt; &lt;p&gt;第5个&lt;/p&gt; &lt;p&gt;第6个&lt;/p&gt; &lt;p&gt;第7个&lt;/p&gt; &lt;p&gt;第8个&lt;/p&gt; &lt;p&gt;第9个&lt;/p&gt; &lt;p&gt;第10个&lt;/p&gt; &lt;/div&gt; --&gt; &lt;!-- 结构3 --&gt; &lt;!-- &lt;div&gt; &lt;span&gt;测试1&lt;/span&gt; &lt;p&gt;张三：98分&lt;/p&gt; &lt;p&gt;李四：88分&lt;/p&gt; &lt;p&gt;王五：78分&lt;/p&gt; &lt;span&gt;测试2&lt;/span&gt; &lt;p&gt;赵六：68分&lt;/p&gt; &lt;span&gt;测试3&lt;/span&gt; &lt;p&gt;孙七：58分&lt;/p&gt; &lt;span&gt;测试4&lt;/span&gt; &lt;p&gt;老八：48分&lt;/p&gt; &lt;span&gt;测试5&lt;/span&gt; &lt;/div&gt; --&gt;&lt;/body&gt;&lt;/html&gt; 了解： :nth-last-child(n) 所有兄弟元素中的倒数第 n 个。 :nth-last-of-type(n) 所有同类型兄弟元素中的 倒数第n个 。 :only-child 选择没有兄弟的元素（独生子女）。 :only-of-type 选择没有同类型兄弟的元素。 :root 根元素。 :empty 内容为空元素（空格也算内容）。 2.7.3 否定伪类:not(选择器) 排除满足括号中条件的元素。 123456789101112131415161718192021222324252627282930313233&lt;!DOCTYPE html&gt;&lt;html lang=&quot;zh-CN&quot;&gt;&lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;title&gt;12_伪类选择器_否定伪类&lt;/title&gt; &lt;style&gt; /* 选中的是div的儿子p元素，但是排除类名为fail的元素 */ /* div&gt;p:not(.fail) &#123; color: red; &#125; */ /* 选中的是div的儿子p元素，但是排除title属性值以“你要加油”开头的 */ /* div&gt;p:not([title^=&quot;你要加油&quot;]) &#123; color: red; &#125; */ /* 选中的是div的儿子p元素，但排除第一个儿子p元素 */ div&gt;p:not(:first-child) &#123; color: red; &#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;div&gt; &lt;p&gt;张三：98分&lt;/p&gt; &lt;p&gt;李四：88分&lt;/p&gt; &lt;p&gt;王五：78分&lt;/p&gt; &lt;p&gt;赵六：68分&lt;/p&gt; &lt;p class=&quot;fail&quot; title=&quot;你要加油啊！孙七&quot;&gt;孙七：58分&lt;/p&gt; &lt;p class=&quot;fail&quot; title=&quot;你要加油啊！老八&quot;&gt;老八：48分&lt;/p&gt; &lt;/div&gt;&lt;/body&gt;&lt;/html&gt; 2.7.4 UI伪类:checked 被选中的复选框或单选按钮。 :enable 可用的表单元素（没有 disabled 属性） :disabled 不可用的表单元素（有 disabled 属性）。 2.7.3 目标伪类:target 选中锚点指向的元素 2.7.4 语言伪类:lang() 根据指定的语言选择元素（本质是看 lang 属性的值）。 2.8 伪元素选择器作用：选中元素中的一些特殊位置。 常用伪元素： ::first-letter 选中元素中的第一个文字。 ::first-line 选中元素中的第一行文字。 ::selection 选中被鼠标选中的内容。 ::placeholder 选中输入框的提示文字。 ::before 在元素最开始的位置，创建一个子元素（必须用 content 属性指定内容）。 ::after 在元素最后的位置，创建一个子元素（必须用 content 属性指定内容）。 12345678910111213141516171819202122232425262728293031323334353637383940414243444546&lt;!DOCTYPE html&gt;&lt;html lang=&quot;zh-CN&quot;&gt;&lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;title&gt;16_伪元素选择器&lt;/title&gt; &lt;style&gt; /* 什么是伪元素？ —— 很像元素，但不是元素（element），是元素中的一些特殊位置 */ /* 选中的是div中的第一个文字 */ div::first-letter &#123; color: red; font-size: 40px; &#125; /* 选中的是div中的第一行文字 */ div::first-line &#123; background-color: yellow; &#125; /* 选中的是div中被鼠标选择的文字 */ div::selection &#123; background-color: green; color: orange; &#125; /* 选中的是input元素中的提示文字 */ input::placeholder &#123; color: skyblue; &#125; /* 选中的是p元素最开始的位置，随后创建一个子元素 */ p::before &#123; content:&quot;￥&quot;; &#125; /* 选中的是p元素最后的位置，随后创建一个子元素 */ p::after &#123; content:&quot;.00&quot; &#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;div&gt;Lorem ipsum dolor sit amet consectetur adipisicing elit. Sunt quibusdam amet eligendi velit dolore sequi, exercitationem consequatur, quis maiores tempore accusantium ipsum aspernatur iusto fugiat fuga natus est placeat. Accusamus maiores culpa et sunt dolorum incidunt. Ducimus in odio tempora minima provident deleniti, ex voluptatem facere, molestias unde exercitationem pariatur rem vero ut quidem quaerat aliquam, nam debitis perspiciatis. Facere?&lt;/div&gt; &lt;br&gt; &lt;input type=&quot;text&quot; placeholder=&quot;请输入您的用户名&quot;&gt; &lt;p&gt;199&lt;/p&gt; &lt;p&gt;299&lt;/p&gt; &lt;p&gt;399&lt;/p&gt; &lt;p&gt;499&lt;/p&gt;&lt;/body&gt;&lt;/html&gt; 3.选择器优先级行内样式 &gt; ID选择器 &gt; 类选择器 &gt; 元素选择器 &gt; 通配选择器。 详细描述： 计算方式：每个选择器，都可计算出一组权重，格式为： (a,b,c) a : ID 选择器的个数。 b : 类、伪类、属性 选择器的个数。 c : 元素、伪元素 选择器的个数。 比较规则：按照从左到右的顺序，依次比较大小，当前位胜出后，后面的不再对比，例如： (1,0,0) &gt; (0,2,2) (1,1,0) &gt; (1,0,3) (1,1,3) &gt; (1,1,2) 特殊规则： 行内样式权重大于所有选择器。 !important 的权重，大于行内样式，大于所有选择器，权重最高！","tags":["CSS","前端"],"categories":["CSS"]},{"title":"样式表优先级","path":"/2024/01/15/样式表优先级/","content":"优先级规则：行内样式 &gt; 内部样式 &#x3D; 外部样式 遵循后来者居上原则。CSS写在后面的起作用。","tags":["CSS","前端"],"categories":["CSS"]},{"title":"H5新增内容","path":"/2024/01/15/H5/","content":"1、语义化标签1.1 布局标签 关于 article 和 section ： artical 里面可以有多个 section 。 section 强调的是分段或分块，如果你想将一块内容分成几段的时候，可使用 section 元素。 article 比 section 更强调独立性，一块内容如果比较独立、比较完整，应该使用article 元素。 1.2 状态标签1、meter标签 语义：定义已知范围内的标量测量。也被称为 gauge （尺度），双标签，例如：电量、磁盘用量 等。 常用属性： 2、progeress标签 语义：显示某个任务完成的进度的指示器，一般用于表示进度条，双标签，例如：工作完成进度 等。 1.3列表标签 1.4新增文本标签1、文本注音 1234&lt;ruby&gt;&lt;span&gt;魑魅魍魉&lt;/span&gt;&lt;rt&gt;chī mèi wǎng liǎng &lt;/rt&gt;&lt;/ruby&gt; 2、文本标记 2、新增表单功能2.1表单控件新增属性 2.2 input新增属性值 2.3 form新增属性 3 多媒体标签3.1 视频标签&lt;video&gt; 标签用来定义视频，它是双标签。 3.2 音频标签 4.新增全局属性 5. 兼容性处理添加元信息，让浏览器处于最优渲染模式。 1234&lt;!--设置IE总是使用最新的文档模式进行渲染--&gt;&lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=Edge&quot;&gt;&lt;!--优先使用 webkit ( Chromium ) 内核进行渲染, 针对360等壳浏览器--&gt;&lt;meta name=&quot;renderer&quot; content=&quot;webkit&quot;&gt; 使用 html5shiv 让低版本浏览器认识 的语义化标签。 123&lt;!--[if lt ie 9]&gt;&lt;script src=&quot;../sources/js/html5shiv.js&quot;&gt;&lt;/script&gt;&lt;![endif]--&gt; 扩展 lt 小于 lte 小于等于 gt 大于 gte 大于等于 ! 逻辑非 示例： 123456&lt;!--[if IE 8]&gt;仅IE8可见&lt;![endif]--&gt;&lt;!--[if gt IE 8]&gt;仅IE8以上可见&lt;![endif]—&gt;&lt;!--[if lt IE 8]&gt;仅IE8以下可见&lt;![endif]—&gt;&lt;!--[if gte IE 8]&gt;IE8及以上可见&lt;![endif]—&gt;&lt;!--[if lte IE 8]&gt;IE8及以下可见&lt;![endif]—&gt;&lt;!--[if !IE 8]&gt;非IE8的IE可见&lt;![endif]--&gt;","tags":["前端","html"],"categories":["html"]},{"title":"补充标签","path":"/2024/01/15/补充标签/","content":"&lt; br&gt;换行 &lt; pre&gt;按原文显示 &lt; hr&gt;分割 隐藏域： &lt;input type&#x3D;”hidden” name&#x3D;”tag” value&#x3D;”100” &gt; 用户不可见的一个输入区域，作用是： 提交表单的时候，携带一些固定的数据。 name 属性：指定数据的名称。 value 属性：指定的是真正提交的数据。 &lt;label&gt;: label 标签可与表单控件相关联，关联之后点击文字，与之对应的表单控件就会获取焦点。 两种与 label 关联方式如下： 让 label 标签的 for 属性的值等于表单控件的 id 。 把表单控件套在 label 标签的里面。 &lt;iframe&gt;嵌入内容","tags":["前端","html"],"categories":["html"]},{"title":"字符实体","path":"/2024/01/15/字符实体/","content":"空格的字符实体&amp;nbsp; &amp;#160 标签&lt;&gt;的字符实体&amp;lt; h1 &amp;gt; &amp;的字符实体&amp;amp;&#x20; 人民币的字符实体&amp;yen; 版权的字符实体&amp;copy; 乘号的字符实体&amp;times; 除号的字符实体&amp;divide;","tags":["前端","html"],"categories":["html"]},{"title":"表格","path":"/2024/01/15/表格/","content":"结构 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556&lt;table border=&quot;1&quot;&gt;&lt;!-- 表格标题 --&gt;&lt;caption&gt;学生信息&lt;/caption&gt;&lt;!-- 表格头部 --&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;姓名&lt;/th&gt;&lt;th&gt;性别&lt;/th&gt;&lt;th&gt;年龄&lt;/th&gt;&lt;th&gt;民族&lt;/th&gt;&lt;th&gt;政治面貌&lt;/th&gt;&lt;/tr&gt;&lt;/thead&gt;2. 常用属性&lt;!-- 表格主体 --&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;张三&lt;/td&gt;&lt;td&gt;男&lt;/td&gt;&lt;td&gt;18&lt;/td&gt;&lt;td&gt;汉族&lt;/td&gt;&lt;td&gt;团员&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;李四&lt;/td&gt;&lt;td&gt;女&lt;/td&gt;&lt;td&gt;20&lt;/td&gt;&lt;td&gt;满族&lt;/td&gt;&lt;td&gt;群众&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;王五&lt;/td&gt;&lt;td&gt;男&lt;/td&gt;&lt;td&gt;20&lt;/td&gt;&lt;td&gt;回族&lt;/td&gt;&lt;td&gt;党员&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;赵六&lt;/td&gt;&lt;td&gt;女&lt;/td&gt;&lt;td&gt;21&lt;/td&gt;&lt;td&gt;壮族&lt;/td&gt;&lt;td&gt;团员&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;!-- 表格脚注 --&gt;&lt;tfoot&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td&gt;&lt;/td&gt;&lt;td&gt;&lt;/td&gt;&lt;td&gt;&lt;/td&gt;&lt;td&gt;共计：4人&lt;/td&gt;&lt;/tr&gt;&lt;/tfoot&gt;&lt;/table&gt; 属性 一般table的属性height意义为最小高度。table会通过自动调整tbody来让整个table高度达到最小高度。","tags":["前端","html"],"categories":["html"]},{"title":"块级元素、行内元素、行内块元素","path":"/2024/01/15/块级元素、行内元素、行内块元素/","content":"块级元素blockquote、address 独占一行。 行内元素文本标签（&lt;em&gt;&lt;strong&gt;&lt;span&gt;&lt;a&gt;等） 不独占一行 规则1：块级元素中能写行内元素、块级元素。 规则2：行内元素中能写行内元素，不能写块级元素 特殊规则: H1-H6不能嵌套 特殊规则：p标签中不能写块元素 特殊规则：a标签内可以包含除自身之外的任何元素 行内块元素IMG","tags":["前端","html"],"categories":["html"]},{"title":"函数式组件","path":"/2023/06/28/函数式组件/","content":"12345678910111213141516171819&lt;html lang=&quot;en&quot;&gt;&lt;head&gt; &lt;title&gt;Document&lt;/title&gt;&lt;/head&gt;&lt;body&gt; &lt;div id=&quot;test&quot;&gt; &lt;/div&gt;&lt;/body&gt;&lt;script src=&quot;../react.development.js&quot; type=&quot;text/javascript&quot;&gt;&lt;/script&gt;&lt;script src=&quot;../react-dom.development.js&quot; type=&quot;text/javascript&quot;&gt;&lt;/script&gt;&lt;script src=&quot;../babel.min.js&quot; type=&quot;text/javascript&quot;&gt;&lt;/script&gt;&lt;script type=&quot;text/babel&quot;&gt;function demo()&#123;console.log(this);//此处的this是undefined，因为babel编译后开启了严格模式return &lt;h2&gt;我是用函数定义的组件&lt;/h2&gt;&#125; &lt;/script&gt;&lt;/html&gt;","tags":["前端","react","组件"],"categories":["react"]},{"title":"jsx基础知识","path":"/2023/06/18/jsx/","content":"jsx语法JSX是类似于XML的js扩展语法，其本质是React.createElement(component,props,…children)方法的语法糖 注：XML早期用于存储和传输数据。 XML格式如下： 1234&lt;student&gt;&lt;name&gt;Tom&lt;/name&gt;&lt;age&gt;19&lt;/age&gt;&lt;/student&gt; JSON格式如下： 1&quot;&#123;&quot;name&quot;：&quot;Tom&quot;,&quot;age&quot;:19&#125;&quot; jsx语法规则1、定义虚拟DOM时，不要写引号。 12345const VDOM=( /* 此处一定不要写引号，因为不是字符串 */ &lt;h1 id=&quot;test&quot;&gt; &lt;span&gt;Hello,React&lt;/span&gt; &lt;/h1&gt;)//2.渲染虚拟DOM到页面ReactDOM.render(VDOM,document.getElementById(&#x27;test&#x27;)). 2、标签里如果要用JS的表达式，要用{}。 1234567const myID=&quot;Test&quot;;const string1=&quot;Hello,React&quot;const VDOM=( /* 此处一定不要写引号，因为不是字符串 */ &lt;h1 id=&#123;myID.toLowerCase()&#125;&gt; &lt;span&gt;&#123;string1.toLowerCase()&#125;&lt;/span&gt; &lt;/h1&gt;)//2.渲染虚拟DOM到页面ReactDOM.render(VDOM,document.getElementById(&#x27;test&#x27;)). 3、写样式时指定类名不用class，用className。 1234567const myID=&quot;Test&quot;;const string1=&quot;Hello,React&quot;const VDOM=( /* 此处一定不要写引号，因为不是字符串 */ &lt;h1 className=&quot;title&quot; id=&#123;myID.toLowerCase()&#125;&gt; &lt;span&gt;&#123;string1.toLowerCase()&#125;&lt;/span&gt; &lt;/h1&gt;)//2.渲染虚拟DOM到页面ReactDOM.render(VDOM,document.getElementById(&#x27;test&#x27;)). 12345&lt;style&gt;.title&#123;background:red;&#125;&lt;/style&gt; 4、写内联样式时用style&#x3D;\"{{kay:value}}\"的样式。 1234567const myID=&quot;Test&quot;;const string1=&quot;Hello,React&quot;const VDOM=( /* 此处一定不要写引号，因为不是字符串 */ &lt;h1 className=&quot;title&quot; id=&#123;myID.toLowerCase()&#125;&gt; &lt;span style=&#123;&#123;color:&#x27;white&#x27;,fontSize:&#x27;29px&#x27;&#125;&#125;&gt;&#123;string1.toLowerCase()&#125;&lt;/span&gt; &lt;/h1&gt;)//2.渲染虚拟DOM到页面ReactDOM.render(VDOM,document.getElementById(&#x27;test&#x27;)). 5、虚拟DOM必须只有一个根标签。 6、标签必须闭合。 7、标签首字母 1）若小写字母开头，则将标签转为html中同名元素，若html中不存在同名元素，则报错。 2）若大写字母开头，react就去渲染对应的组件，若组件没有定义，则报错。 注：区分js语句和js表达式 1、表达式：会产生一个值，可以放在任何一个需要值的地方。如a、a+b、demo(1)、arr.map()、function test（）{} 2、语句（代码）： 比如if(){}、for(){}、switch（）{case: ….}","tags":["前端","react","jsx"],"categories":["react"]},{"title":"虚拟DOM创建","path":"/2023/06/18/虚拟DOM创建/","content":"1.用jsx创建虚拟DOM1234const VDOM=( /* 此处一定不要写引号，因为不是字符串 */ &lt;h1 id=&quot;title&quot;&gt; &lt;span&gt;Hello,React&lt;/span&gt; &lt;/h1&gt;)ReactDOM.render(VDOM,document.querySelector(&#x27;.test&#x27;)) 2.用js创建虚拟DOM1234//1.创建虚拟DOM,创建嵌套格式的domconst VDOM=React.createElement(&#x27;h1&#x27;,&#123;id:&#x27;title&#x27;&#125;,React.createElement(&#x27;span&#x27;,&#123;&#125;,&#x27;hello,React&#x27;))//2.渲染虚拟DOM到页面ReactDOM.render(VDOM,document.querySelector(&#x27;.test&#x27;)). 3.虚拟DOM与真实DOM的区别1、虚拟DOM本质上就是Object类型的对象 2、虚拟DOM较为轻量级，真实DOM较为重量级，因为虚拟DOM运用于React内部，无需真实DOM上的过多属性。 3、虚拟DOM最终会被React转化为真实DOM。","tags":["前端","react"],"categories":["react"]},{"title":"类式组件","path":"/2023/06/18/类式组件/","content":"类123456789101112131415161718192021222324252627282930&lt;script type=&quot;text/javascript&quot;&gt;class Person&#123;constructor(name,age)&#123;//构造器方法//构造器中的this是类的实例对象this.name=namethis.age=age&#125;//一般方法speak()&#123;//speak方法放在了类的原型对象上，供实例使用console.log(`我叫$(this.name),我的年龄是$(this.age)`)&#125;&#125;class Student extends Person&#123; constructor(name,age,grade)&#123; super(name,age) this.grade=grade; &#125; speak()&#123; console.log(`我叫$&#123;this.name&#125;,我的年龄是$&#123;this.age&#125;,我的年纪是$&#123;this.grade&#125;`) &#125;&#125;const p1=new Person(&#x27;tom&#x27;,18)const p2=new Person(&#x27;jerry&#x27;,19)const s1=new Student(&#x27;zhang&#x27;,15,&#x27;高一&#x27;)p1.speak()p2.speak()s1.speak()&lt;/script&gt; 注： 1、类的构造器不是一定要写的 2、如果a类继承于b类，且a类中写了构造器，则a类构造器中super必须要调用。 3、类定义的方法，都放在类的原型对象上，共实例使用 创建类组件12345678910111213&lt;script type=&quot;text/babel&quot;&gt;class MyComponent extends React.Component&#123;//这里Component的c要大写//render是放在MyComponent原型对象上，供实例使用的render()&#123;return&#123;//render中的this是MyComponent的实例对象&lt;h2&gt;我是类定义的组件&lt;/h2&gt;&#125;&#125;&#125;ReactDOM.render(&lt;MyComponent/&gt;,document.getElementById(&#x27;test&#x27;))&lt;/script&gt; 执行ReactDOM.render（&lt;MyComponent&#x2F;&gt;）之后。发生了什么？ 1、react解析组件标签，找到MyComponent组件 2、发现组件是使用类定义的，随后new出该类的实例，并通过该实例调用到原型上的render方法 3、将render返回的虚拟dom转为真实dom，随后呈现在页面中。","tags":["前端","react","组件"],"categories":["react"]},{"title":"Hello","path":"/2023/04/15/testlx/","content":"Do not go gentle into that good night.","tags":["随笔"],"categories":["随笔"]}]